---
title: "Bootstrap Confidence Interval for Standardized Solution in lavaan"
author: "Shu Fai Cheung"
output: rmarkdown::html_vignette
vignette: >
  %\VignetteIndexEntry{Bootstrap Confidence Interval for Standardized Solution in lavaan}
  %\VignetteEngine{knitr::rmarkdown}
  %\VignetteEncoding{UTF-8}
---

```{r, include = FALSE}
knitr::opts_chunk$set(
  collapse = TRUE,
  comment = "#>"
)
```

# Introduction

This document introduces the function
`standardizedSolution_boot_ci()`,
and related helpers, from the package
[`semhelpinghands`](https://sfcheung.github.io/semhelpinghands/).


# What `standardizedSolution_boot_ci()` Does

In `lavaan`, even with `se = "bootstrap"`,
the confidence intervals in the standardized
solution are *not* bootstrap confidence
intervals. This is a problem when researchers
want to form bootstrap confidence intervals
for parameters such as
a *standardized* indirect effect.[^notboot]

[^notboot]: In `lavaan`, if bootstrapping is requested, the standard errors and
confidence intervals in the standardized solutions are computed by delta method
using the variance-covariance matrix of the bootstrap estimates. The intervals
are symmetric about the point estimates and are not the bootstrap
percentile confidence intervals users expect when bootstrapping is conducted.

The function `standardizedSolution_boot_ci()`
addresses this problem.
It accepts a `lavaan::lavaan-class` object fitted
with `se = "bootstrap"` (or `se = "boot"`) and forms the percentile
confidence intervals based on the bootstrap estimates stored in the object.

# Data and Model

A mediation model example modified from the
official `lavaan` website is used
(https://lavaan.ugent.be/tutorial/mediation.html).

```{r}
library(lavaan)
set.seed(1234)
n <- 100
# X drawn from a Chi-square distribution with df = 2
X <- (rchisq(n, df = 2) - 2) / sqrt(2 * 2)
M <- .40 * X + sqrt(1 - .40^2) * rnorm(n)
Y <- .30 * M + sqrt(1 - .30^2) * rnorm(n)
Data <- data.frame(X = X,
                   Y = Y,
                   M = M)
model <-
"
# direct effect
  Y ~ c*X
# mediator
  M ~ a*X
  Y ~ b*M
# indirect effect (a*b)
  ab := a*b
# total effect
  total := c + (a*b)
"
```

This model is fitted with `se = "bootstrap"`
and 5000 replication. (Change `ncpus`
to a value appropriate for the system
running it.)

```{r}
fit <- sem(model,
           data = Data,
           se = "bootstrap",
           bootstrap = 5000,
           parallel = "snow",
           ncpus = 4,
           iseed = 1234)
```

(Note that having a warning for some
bootstrap runs is normal. The failed
runs will not be used in forming the
confidence intervals.)

This is the standardized solution with delta-method confidence intervals.

```{r}
standardizedSolution(fit)
```

# Bootstrap Percentile CIs for Standardized Solution

To form bootstrap percentile confidence intervals for the standardized
solution, simply use `standardizedSolution_boot_ci()` instead of
`lavaan::standardizedSolution()`:

```{r}
library(semhelpinghands)
ci_boot <- standardizedSolution_boot_ci(fit)
ci_boot
```

The bootstrap percentile confidence intervals are appended to the right
of the original output of `lavaan::standardizedSolution()`,
in columns `boot.ci.lower` and `boot.ci.upper`. The standard
errors based on the bootstrap estimates (the standard deviation
of the estimates) are listed on the column `boot.se`.

```{r echo = FALSE}
tmp <- ci_boot[ci_boot$label == "ab", ]
ab_ci_delta_1 <- formatC(tmp[, "ci.lower"], digits = 3, format = "f")
ab_ci_delta_2 <- formatC(tmp[, "ci.upper"], digits = 3, format = "f")
ab_ci_boot_1 <- formatC(tmp[, "boot.ci.lower"], digits = 3, format = "f")
ab_ci_boot_2 <- formatC(tmp[, "boot.ci.upper"], digits = 3, format = "f")
ab_ci_delta <- paste0("[", ab_ci_delta_1, ", ", ab_ci_delta_2, "]")
ab_ci_boot <- paste0("[", ab_ci_boot_1, ", ", ab_ci_boot_2, "]")
```

As expected, the bootstrap percentile
confidence interval of the indirect
effect, `ab`, is `r ab_ci_boot`,
wider than the
delta-method confidence interval,
`r ab_ci_delta`, and
is shifted to the right.

# Print in a Friendly Format

The print-method of the output of
`standardizedSolution_boot_ci()` supports
printing the results in a text Format
similar to the summary of `lavaan`
output. Call `print()` directly and
add `output = "text"`:

```{r}
print(ci_boot,
      output = "text")
```

Note that it will replace the results
of *unstandardized* solution by those
from the *standardized* solution.

To print both the unstandardized and
standardized results in the text-format,
add `standardized_only = FALSE`
when calling `print()`.

# Note

The function `standardizedSolution_boot_ci()` takes some time to run because
it retrieves the estimates of the unstandardized solution in each bootstrap
sample and computes the estimates in the standardized solution. Therefore,
if 5,000 bootstrap samples are requested, this process is repeated 5,000 times.
Nevertheless, it is still much faster than fitting the model 5,000 times again.

# Background

This function was originally proposed in an [issue at GitHub](https://github.com/simsem/semTools/issues/101#issue-1021974657),
inspired by a discussion at the [Google group for lavaan](https://groups.google.com/g/lavaan/c/qQBXSz5cd0o/m/R8YT5HxNAgAJ).
It is not a versatile function and used some "tricks" to
do the work. A more reliable way is to use function like
`lavaan::bootstrapLavaan()`. Nevertheless, this simple function
is good enough for the cases I encountered in my work.


