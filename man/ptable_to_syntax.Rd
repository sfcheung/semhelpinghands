% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/ptable_to_syntax.R
\name{ptable_to_syntax}
\alias{ptable_to_syntax}
\alias{compare_ptables}
\title{Convert a 'lavaan' Parameter
Table to a 'lavaan' Model Syntax}
\usage{
ptable_to_syntax(fit)

compare_ptables(ptable1, ptable2)
}
\arguments{
\item{fit}{A \code{lavaan} parameter table.
For example, the output of
\code{\link[lavaan:lavParTable]{lavaan::parameterTable()}}.}

\item{ptable1}{The first \code{lavaan}
parameter table, to be compared with
\code{ptable2}.}

\item{ptable2}{The second \code{lavaan}
parmameter table, to be compared with
\code{ptable1}.}
}
\value{
\code{\link[=ptable_to_syntax]{ptable_to_syntax()}} returns a
length-one character vector that stores
the generated \code{lavaan} model syntax.

\code{\link[=compare_ptables]{compare_ptables()}} returns a
length-one logical vector. \code{TRUE}
if the two models are identical
in form. \code{FALSE} if they are
not identical.
}
\description{
It tries to generate a
'lavaan' model syntax from a
\code{lavaan} parameter table.
}
\details{
This function tries to convert
a \code{lavaan} parameter table to a
text representation of the \code{lavaan}
model specified in model syntax.

When users call \code{\link[lavaan:sem]{lavaan::sem()}},
in addition to the model syntax,
other arguments not stored in the
syntax are also used to produce
the final model (e.g.,
\code{meanstructure}, \code{fixed.x}, and
\code{std.lv}). To produce exactly the
same model, these arguments are also
needed to be specified, which is
difficult to generate using only
the parameter table.

Therefore, the model syntax produced
will state all aspects of a model
explicitly, even for those aspects
that usually can be omitted due to
the default values of these arguments.
This approach requires users to call
\code{\link[lavaan:lavaan]{lavaan::lavaan()}} directly, instead
of its wrappers (e.g, \code{\link[lavaan:sem]{lavaan::sem()}}),
to produce the same parameter table.

The model syntax produced this way
is more difficulty to read. However,
it ensures that original model can
be reproduced, without the need to
know the arguments to set.

The function \code{\link[=compare_ptables]{compare_ptables()}}
only compares the forms of the
two models, including user starting
values, if any. It does not compare
parameter estimates and standard
errors.
\subsection{Limitations}{

The function \code{\link[=ptable_to_syntax]{ptable_to_syntax()}}
does not yet support the following
models:
\itemize{
\item Multigroup models.
\item Multilevel models.
\item Models with categorical variables.
\item Models with user-sepcified lower or
upper bounds.
}
}
}
\section{Functions}{
\itemize{
\item \code{ptable_to_syntax()}: Convert
a lavaan parameter a lavaan model
syntax.

\item \code{compare_ptables()}: Compare two lavaan parameter tables.

}}
\examples{

library(lavaan)

mod <-
"
visual  =~ x3 + x1 + x3
textual =~ x4 + x6 + x5
speed   =~ x7 + x8 + x9 + x6
visual ~ a*textual
speed ~ start(0.1) * b*visual
ab: = a * b
"

fit <- sem(mod, data = HolzingerSwineford1939)

mod_chk <- ptable_to_syntax(fit)
cat(mod_chk, sep = "\n")
# Need to call lavaan() directly
fit_chk <- lavaan(mod_chk, data = HolzingerSwineford1939)
fit_chk
fit
# Compare the parameter table:
(ptable1 <- parameterTable(fit))
(ptable2 <- parameterTable(fit_chk))
compare_ptables(ptable1, ptable2)


}
\seealso{
\code{\link[lavaan:lavaan]{lavaan::lavaan()}}, \code{\link[lavaan:lavParTable]{lavaan::parameterTable()}}
}
\author{
Shu Fai Cheung \url{https://orcid.org/0000-0002-9871-9448}
}
