[{"path":"https://sfcheung.github.io/semhelpinghands/LICENSE.html","id":null,"dir":"","previous_headings":"","what":"GNU General Public License","title":"GNU General Public License","text":"Version 3, 29 June 2007Copyright © 2007 Free Software Foundation, Inc. <http://fsf.org/> Everyone permitted copy distribute verbatim copies license document, changing allowed.","code":""},{"path":"https://sfcheung.github.io/semhelpinghands/LICENSE.html","id":"preamble","dir":"","previous_headings":"","what":"Preamble","title":"GNU General Public License","text":"GNU General Public License free, copyleft license software kinds works. licenses software practical works designed take away freedom share change works. contrast, GNU General Public License intended guarantee freedom share change versions program–make sure remains free software users. , Free Software Foundation, use GNU General Public License software; applies also work released way authors. can apply programs, . speak free software, referring freedom, price. General Public Licenses designed make sure freedom distribute copies free software (charge wish), receive source code can get want , can change software use pieces new free programs, know can things. protect rights, need prevent others denying rights asking surrender rights. Therefore, certain responsibilities distribute copies software, modify : responsibilities respect freedom others. example, distribute copies program, whether gratis fee, must pass recipients freedoms received. must make sure , , receive can get source code. must show terms know rights. Developers use GNU GPL protect rights two steps: (1) assert copyright software, (2) offer License giving legal permission copy, distribute /modify . developers’ authors’ protection, GPL clearly explains warranty free software. users’ authors’ sake, GPL requires modified versions marked changed, problems attributed erroneously authors previous versions. devices designed deny users access install run modified versions software inside , although manufacturer can . fundamentally incompatible aim protecting users’ freedom change software. systematic pattern abuse occurs area products individuals use, precisely unacceptable. Therefore, designed version GPL prohibit practice products. problems arise substantially domains, stand ready extend provision domains future versions GPL, needed protect freedom users. Finally, every program threatened constantly software patents. States allow patents restrict development use software general-purpose computers, , wish avoid special danger patents applied free program make effectively proprietary. prevent , GPL assures patents used render program non-free. precise terms conditions copying, distribution modification follow.","code":""},{"path":[]},{"path":"https://sfcheung.github.io/semhelpinghands/LICENSE.html","id":"id_0-definitions","dir":"","previous_headings":"TERMS AND CONDITIONS","what":"0. Definitions","title":"GNU General Public License","text":"“License” refers version 3 GNU General Public License. “Copyright” also means copyright-like laws apply kinds works, semiconductor masks. “Program” refers copyrightable work licensed License. licensee addressed “”. “Licensees” “recipients” may individuals organizations. “modify” work means copy adapt part work fashion requiring copyright permission, making exact copy. resulting work called “modified version” earlier work work “based ” earlier work. “covered work” means either unmodified Program work based Program. “propagate” work means anything , without permission, make directly secondarily liable infringement applicable copyright law, except executing computer modifying private copy. Propagation includes copying, distribution (without modification), making available public, countries activities well. “convey” work means kind propagation enables parties make receive copies. Mere interaction user computer network, transfer copy, conveying. interactive user interface displays “Appropriate Legal Notices” extent includes convenient prominently visible feature (1) displays appropriate copyright notice, (2) tells user warranty work (except extent warranties provided), licensees may convey work License, view copy License. interface presents list user commands options, menu, prominent item list meets criterion.","code":""},{"path":"https://sfcheung.github.io/semhelpinghands/LICENSE.html","id":"id_1-source-code","dir":"","previous_headings":"TERMS AND CONDITIONS","what":"1. Source Code","title":"GNU General Public License","text":"“source code” work means preferred form work making modifications . “Object code” means non-source form work. “Standard Interface” means interface either official standard defined recognized standards body, , case interfaces specified particular programming language, one widely used among developers working language. “System Libraries” executable work include anything, work whole, () included normal form packaging Major Component, part Major Component, (b) serves enable use work Major Component, implement Standard Interface implementation available public source code form. “Major Component”, context, means major essential component (kernel, window system, ) specific operating system () executable work runs, compiler used produce work, object code interpreter used run . “Corresponding Source” work object code form means source code needed generate, install, (executable work) run object code modify work, including scripts control activities. However, include work’s System Libraries, general-purpose tools generally available free programs used unmodified performing activities part work. example, Corresponding Source includes interface definition files associated source files work, source code shared libraries dynamically linked subprograms work specifically designed require, intimate data communication control flow subprograms parts work. Corresponding Source need include anything users can regenerate automatically parts Corresponding Source. Corresponding Source work source code form work.","code":""},{"path":"https://sfcheung.github.io/semhelpinghands/LICENSE.html","id":"id_2-basic-permissions","dir":"","previous_headings":"TERMS AND CONDITIONS","what":"2. Basic Permissions","title":"GNU General Public License","text":"rights granted License granted term copyright Program, irrevocable provided stated conditions met. License explicitly affirms unlimited permission run unmodified Program. output running covered work covered License output, given content, constitutes covered work. License acknowledges rights fair use equivalent, provided copyright law. may make, run propagate covered works convey, without conditions long license otherwise remains force. may convey covered works others sole purpose make modifications exclusively , provide facilities running works, provided comply terms License conveying material control copyright. thus making running covered works must exclusively behalf, direction control, terms prohibit making copies copyrighted material outside relationship . Conveying circumstances permitted solely conditions stated . Sublicensing allowed; section 10 makes unnecessary.","code":""},{"path":"https://sfcheung.github.io/semhelpinghands/LICENSE.html","id":"id_3-protecting-users-legal-rights-from-anti-circumvention-law","dir":"","previous_headings":"TERMS AND CONDITIONS","what":"3. Protecting Users’ Legal Rights From Anti-Circumvention Law","title":"GNU General Public License","text":"covered work shall deemed part effective technological measure applicable law fulfilling obligations article 11 WIPO copyright treaty adopted 20 December 1996, similar laws prohibiting restricting circumvention measures. convey covered work, waive legal power forbid circumvention technological measures extent circumvention effected exercising rights License respect covered work, disclaim intention limit operation modification work means enforcing, work’s users, third parties’ legal rights forbid circumvention technological measures.","code":""},{"path":"https://sfcheung.github.io/semhelpinghands/LICENSE.html","id":"id_4-conveying-verbatim-copies","dir":"","previous_headings":"TERMS AND CONDITIONS","what":"4. Conveying Verbatim Copies","title":"GNU General Public License","text":"may convey verbatim copies Program’s source code receive , medium, provided conspicuously appropriately publish copy appropriate copyright notice; keep intact notices stating License non-permissive terms added accord section 7 apply code; keep intact notices absence warranty; give recipients copy License along Program. may charge price price copy convey, may offer support warranty protection fee.","code":""},{"path":"https://sfcheung.github.io/semhelpinghands/LICENSE.html","id":"id_5-conveying-modified-source-versions","dir":"","previous_headings":"TERMS AND CONDITIONS","what":"5. Conveying Modified Source Versions","title":"GNU General Public License","text":"may convey work based Program, modifications produce Program, form source code terms section 4, provided also meet conditions: ) work must carry prominent notices stating modified , giving relevant date. b) work must carry prominent notices stating released License conditions added section 7. requirement modifies requirement section 4 “keep intact notices”. c) must license entire work, whole, License anyone comes possession copy. License therefore apply, along applicable section 7 additional terms, whole work, parts, regardless packaged. License gives permission license work way, invalidate permission separately received . d) work interactive user interfaces, must display Appropriate Legal Notices; however, Program interactive interfaces display Appropriate Legal Notices, work need make . compilation covered work separate independent works, nature extensions covered work, combined form larger program, volume storage distribution medium, called “aggregate” compilation resulting copyright used limit access legal rights compilation’s users beyond individual works permit. Inclusion covered work aggregate cause License apply parts aggregate.","code":""},{"path":"https://sfcheung.github.io/semhelpinghands/LICENSE.html","id":"id_6-conveying-non-source-forms","dir":"","previous_headings":"TERMS AND CONDITIONS","what":"6. Conveying Non-Source Forms","title":"GNU General Public License","text":"may convey covered work object code form terms sections 4 5, provided also convey machine-readable Corresponding Source terms License, one ways: ) Convey object code , embodied , physical product (including physical distribution medium), accompanied Corresponding Source fixed durable physical medium customarily used software interchange. b) Convey object code , embodied , physical product (including physical distribution medium), accompanied written offer, valid least three years valid long offer spare parts customer support product model, give anyone possesses object code either (1) copy Corresponding Source software product covered License, durable physical medium customarily used software interchange, price reasonable cost physically performing conveying source, (2) access copy Corresponding Source network server charge. c) Convey individual copies object code copy written offer provide Corresponding Source. alternative allowed occasionally noncommercially, received object code offer, accord subsection 6b. d) Convey object code offering access designated place (gratis charge), offer equivalent access Corresponding Source way place charge. need require recipients copy Corresponding Source along object code. place copy object code network server, Corresponding Source may different server (operated third party) supports equivalent copying facilities, provided maintain clear directions next object code saying find Corresponding Source. Regardless server hosts Corresponding Source, remain obligated ensure available long needed satisfy requirements. e) Convey object code using peer--peer transmission, provided inform peers object code Corresponding Source work offered general public charge subsection 6d. separable portion object code, whose source code excluded Corresponding Source System Library, need included conveying object code work. “User Product” either (1) “consumer product”, means tangible personal property normally used personal, family, household purposes, (2) anything designed sold incorporation dwelling. determining whether product consumer product, doubtful cases shall resolved favor coverage. particular product received particular user, “normally used” refers typical common use class product, regardless status particular user way particular user actually uses, expects expected use, product. product consumer product regardless whether product substantial commercial, industrial non-consumer uses, unless uses represent significant mode use product. “Installation Information” User Product means methods, procedures, authorization keys, information required install execute modified versions covered work User Product modified version Corresponding Source. information must suffice ensure continued functioning modified object code case prevented interfered solely modification made. convey object code work section , , specifically use , User Product, conveying occurs part transaction right possession use User Product transferred recipient perpetuity fixed term (regardless transaction characterized), Corresponding Source conveyed section must accompanied Installation Information. requirement apply neither third party retains ability install modified object code User Product (example, work installed ROM). requirement provide Installation Information include requirement continue provide support service, warranty, updates work modified installed recipient, User Product modified installed. Access network may denied modification materially adversely affects operation network violates rules protocols communication across network. Corresponding Source conveyed, Installation Information provided, accord section must format publicly documented (implementation available public source code form), must require special password key unpacking, reading copying.","code":""},{"path":"https://sfcheung.github.io/semhelpinghands/LICENSE.html","id":"id_7-additional-terms","dir":"","previous_headings":"TERMS AND CONDITIONS","what":"7. Additional Terms","title":"GNU General Public License","text":"“Additional permissions” terms supplement terms License making exceptions one conditions. Additional permissions applicable entire Program shall treated though included License, extent valid applicable law. additional permissions apply part Program, part may used separately permissions, entire Program remains governed License without regard additional permissions. convey copy covered work, may option remove additional permissions copy, part . (Additional permissions may written require removal certain cases modify work.) may place additional permissions material, added covered work, can give appropriate copyright permission. Notwithstanding provision License, material add covered work, may (authorized copyright holders material) supplement terms License terms: ) Disclaiming warranty limiting liability differently terms sections 15 16 License; b) Requiring preservation specified reasonable legal notices author attributions material Appropriate Legal Notices displayed works containing ; c) Prohibiting misrepresentation origin material, requiring modified versions material marked reasonable ways different original version; d) Limiting use publicity purposes names licensors authors material; e) Declining grant rights trademark law use trade names, trademarks, service marks; f) Requiring indemnification licensors authors material anyone conveys material (modified versions ) contractual assumptions liability recipient, liability contractual assumptions directly impose licensors authors. non-permissive additional terms considered “restrictions” within meaning section 10. Program received , part , contains notice stating governed License along term restriction, may remove term. license document contains restriction permits relicensing conveying License, may add covered work material governed terms license document, provided restriction survive relicensing conveying. add terms covered work accord section, must place, relevant source files, statement additional terms apply files, notice indicating find applicable terms. Additional terms, permissive non-permissive, may stated form separately written license, stated exceptions; requirements apply either way.","code":""},{"path":"https://sfcheung.github.io/semhelpinghands/LICENSE.html","id":"id_8-termination","dir":"","previous_headings":"TERMS AND CONDITIONS","what":"8. Termination","title":"GNU General Public License","text":"may propagate modify covered work except expressly provided License. attempt otherwise propagate modify void, automatically terminate rights License (including patent licenses granted third paragraph section 11). However, cease violation License, license particular copyright holder reinstated () provisionally, unless copyright holder explicitly finally terminates license, (b) permanently, copyright holder fails notify violation reasonable means prior 60 days cessation. Moreover, license particular copyright holder reinstated permanently copyright holder notifies violation reasonable means, first time received notice violation License (work) copyright holder, cure violation prior 30 days receipt notice. Termination rights section terminate licenses parties received copies rights License. rights terminated permanently reinstated, qualify receive new licenses material section 10.","code":""},{"path":"https://sfcheung.github.io/semhelpinghands/LICENSE.html","id":"id_9-acceptance-not-required-for-having-copies","dir":"","previous_headings":"TERMS AND CONDITIONS","what":"9. Acceptance Not Required for Having Copies","title":"GNU General Public License","text":"required accept License order receive run copy Program. Ancillary propagation covered work occurring solely consequence using peer--peer transmission receive copy likewise require acceptance. However, nothing License grants permission propagate modify covered work. actions infringe copyright accept License. Therefore, modifying propagating covered work, indicate acceptance License .","code":""},{"path":"https://sfcheung.github.io/semhelpinghands/LICENSE.html","id":"id_10-automatic-licensing-of-downstream-recipients","dir":"","previous_headings":"TERMS AND CONDITIONS","what":"10. Automatic Licensing of Downstream Recipients","title":"GNU General Public License","text":"time convey covered work, recipient automatically receives license original licensors, run, modify propagate work, subject License. responsible enforcing compliance third parties License. “entity transaction” transaction transferring control organization, substantially assets one, subdividing organization, merging organizations. propagation covered work results entity transaction, party transaction receives copy work also receives whatever licenses work party’s predecessor interest give previous paragraph, plus right possession Corresponding Source work predecessor interest, predecessor can get reasonable efforts. may impose restrictions exercise rights granted affirmed License. example, may impose license fee, royalty, charge exercise rights granted License, may initiate litigation (including cross-claim counterclaim lawsuit) alleging patent claim infringed making, using, selling, offering sale, importing Program portion .","code":""},{"path":"https://sfcheung.github.io/semhelpinghands/LICENSE.html","id":"id_11-patents","dir":"","previous_headings":"TERMS AND CONDITIONS","what":"11. Patents","title":"GNU General Public License","text":"“contributor” copyright holder authorizes use License Program work Program based. work thus licensed called contributor’s “contributor version”. contributor’s “essential patent claims” patent claims owned controlled contributor, whether already acquired hereafter acquired, infringed manner, permitted License, making, using, selling contributor version, include claims infringed consequence modification contributor version. purposes definition, “control” includes right grant patent sublicenses manner consistent requirements License. contributor grants non-exclusive, worldwide, royalty-free patent license contributor’s essential patent claims, make, use, sell, offer sale, import otherwise run, modify propagate contents contributor version. following three paragraphs, “patent license” express agreement commitment, however denominated, enforce patent (express permission practice patent covenant sue patent infringement). “grant” patent license party means make agreement commitment enforce patent party. convey covered work, knowingly relying patent license, Corresponding Source work available anyone copy, free charge terms License, publicly available network server readily accessible means, must either (1) cause Corresponding Source available, (2) arrange deprive benefit patent license particular work, (3) arrange, manner consistent requirements License, extend patent license downstream recipients. “Knowingly relying” means actual knowledge , patent license, conveying covered work country, recipient’s use covered work country, infringe one identifiable patents country reason believe valid. , pursuant connection single transaction arrangement, convey, propagate procuring conveyance , covered work, grant patent license parties receiving covered work authorizing use, propagate, modify convey specific copy covered work, patent license grant automatically extended recipients covered work works based . patent license “discriminatory” include within scope coverage, prohibits exercise , conditioned non-exercise one rights specifically granted License. may convey covered work party arrangement third party business distributing software, make payment third party based extent activity conveying work, third party grants, parties receive covered work , discriminatory patent license () connection copies covered work conveyed (copies made copies), (b) primarily connection specific products compilations contain covered work, unless entered arrangement, patent license granted, prior 28 March 2007. Nothing License shall construed excluding limiting implied license defenses infringement may otherwise available applicable patent law.","code":""},{"path":"https://sfcheung.github.io/semhelpinghands/LICENSE.html","id":"id_12-no-surrender-of-others-freedom","dir":"","previous_headings":"TERMS AND CONDITIONS","what":"12. No Surrender of Others’ Freedom","title":"GNU General Public License","text":"conditions imposed (whether court order, agreement otherwise) contradict conditions License, excuse conditions License. convey covered work satisfy simultaneously obligations License pertinent obligations, consequence may convey . example, agree terms obligate collect royalty conveying convey Program, way satisfy terms License refrain entirely conveying Program.","code":""},{"path":"https://sfcheung.github.io/semhelpinghands/LICENSE.html","id":"id_13-use-with-the-gnu-affero-general-public-license","dir":"","previous_headings":"TERMS AND CONDITIONS","what":"13. Use with the GNU Affero General Public License","title":"GNU General Public License","text":"Notwithstanding provision License, permission link combine covered work work licensed version 3 GNU Affero General Public License single combined work, convey resulting work. terms License continue apply part covered work, special requirements GNU Affero General Public License, section 13, concerning interaction network apply combination .","code":""},{"path":"https://sfcheung.github.io/semhelpinghands/LICENSE.html","id":"id_14-revised-versions-of-this-license","dir":"","previous_headings":"TERMS AND CONDITIONS","what":"14. Revised Versions of this License","title":"GNU General Public License","text":"Free Software Foundation may publish revised /new versions GNU General Public License time time. new versions similar spirit present version, may differ detail address new problems concerns. version given distinguishing version number. Program specifies certain numbered version GNU General Public License “later version” applies , option following terms conditions either numbered version later version published Free Software Foundation. Program specify version number GNU General Public License, may choose version ever published Free Software Foundation. Program specifies proxy can decide future versions GNU General Public License can used, proxy’s public statement acceptance version permanently authorizes choose version Program. Later license versions may give additional different permissions. However, additional obligations imposed author copyright holder result choosing follow later version.","code":""},{"path":"https://sfcheung.github.io/semhelpinghands/LICENSE.html","id":"id_15-disclaimer-of-warranty","dir":"","previous_headings":"TERMS AND CONDITIONS","what":"15. Disclaimer of Warranty","title":"GNU General Public License","text":"WARRANTY PROGRAM, EXTENT PERMITTED APPLICABLE LAW. EXCEPT OTHERWISE STATED WRITING COPYRIGHT HOLDERS /PARTIES PROVIDE PROGRAM “” WITHOUT WARRANTY KIND, EITHER EXPRESSED IMPLIED, INCLUDING, LIMITED , IMPLIED WARRANTIES MERCHANTABILITY FITNESS PARTICULAR PURPOSE. ENTIRE RISK QUALITY PERFORMANCE PROGRAM . PROGRAM PROVE DEFECTIVE, ASSUME COST NECESSARY SERVICING, REPAIR CORRECTION.","code":""},{"path":"https://sfcheung.github.io/semhelpinghands/LICENSE.html","id":"id_16-limitation-of-liability","dir":"","previous_headings":"TERMS AND CONDITIONS","what":"16. Limitation of Liability","title":"GNU General Public License","text":"EVENT UNLESS REQUIRED APPLICABLE LAW AGREED WRITING COPYRIGHT HOLDER, PARTY MODIFIES /CONVEYS PROGRAM PERMITTED , LIABLE DAMAGES, INCLUDING GENERAL, SPECIAL, INCIDENTAL CONSEQUENTIAL DAMAGES ARISING USE INABILITY USE PROGRAM (INCLUDING LIMITED LOSS DATA DATA RENDERED INACCURATE LOSSES SUSTAINED THIRD PARTIES FAILURE PROGRAM OPERATE PROGRAMS), EVEN HOLDER PARTY ADVISED POSSIBILITY DAMAGES.","code":""},{"path":"https://sfcheung.github.io/semhelpinghands/LICENSE.html","id":"id_17-interpretation-of-sections-15-and-16","dir":"","previous_headings":"TERMS AND CONDITIONS","what":"17. Interpretation of Sections 15 and 16","title":"GNU General Public License","text":"disclaimer warranty limitation liability provided given local legal effect according terms, reviewing courts shall apply local law closely approximates absolute waiver civil liability connection Program, unless warranty assumption liability accompanies copy Program return fee. END TERMS CONDITIONS","code":""},{"path":"https://sfcheung.github.io/semhelpinghands/LICENSE.html","id":"how-to-apply-these-terms-to-your-new-programs","dir":"","previous_headings":"","what":"How to Apply These Terms to Your New Programs","title":"GNU General Public License","text":"develop new program, want greatest possible use public, best way achieve make free software everyone can redistribute change terms. , attach following notices program. safest attach start source file effectively state exclusion warranty; file least “copyright” line pointer full notice found. Also add information contact electronic paper mail. program terminal interaction, make output short notice like starts interactive mode: hypothetical commands show w show c show appropriate parts General Public License. course, program’s commands might different; GUI interface, use “box”. also get employer (work programmer) school, , sign “copyright disclaimer” program, necessary. information , apply follow GNU GPL, see <http://www.gnu.org/licenses/>. GNU General Public License permit incorporating program proprietary programs. program subroutine library, may consider useful permit linking proprietary applications library. want , use GNU Lesser General Public License instead License. first, please read <http://www.gnu.org/philosophy/--lgpl.html>.","code":"<one line to give the program's name and a brief idea of what it does.> Copyright (C) <year>  <name of author>  This program is free software: you can redistribute it and/or modify it under the terms of the GNU General Public License as published by the Free Software Foundation, either version 3 of the License, or (at your option) any later version.  This program is distributed in the hope that it will be useful, but WITHOUT ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License for more details.  You should have received a copy of the GNU General Public License along with this program.  If not, see <http://www.gnu.org/licenses/>. <program>  Copyright (C) <year>  <name of author> This program comes with ABSOLUTELY NO WARRANTY; for details type 'show w'. This is free software, and you are welcome to redistribute it under certain conditions; type 'show c' for details."},{"path":"https://sfcheung.github.io/semhelpinghands/articles/plot_boot.html","id":"introduction","dir":"Articles","previous_headings":"","what":"Introduction","title":"Diagnostic Plots of Bootstrap Estimates","text":"document introduces function plot_boot(), related helpers, package semhelpinghands. used generating plots distribution bootstrap estimates, suggested Rousselet et al. (2021), check anything unusual bootstrap distribution, bootstrap estimates unusually extreme compared estimates.","code":""},{"path":"https://sfcheung.github.io/semhelpinghands/articles/plot_boot.html","id":"data-and-model","dir":"Articles","previous_headings":"","what":"Data and Model","title":"Diagnostic Plots of Bootstrap Estimates","text":"mediation model example modified official lavaan website used (https://lavaan.ugent./tutorial/mediation.html). model fitted se = \"bootstrap\" 5000 replication. (Change ncpus value appropriate system running .) (Note warning bootstrap runs normal. failed runs used forming confidence intervals.) bootstrap confidence intervals:","code":"library(lavaan) #> This is lavaan 0.6-16 #> lavaan is FREE software! Please report any bugs. set.seed(12345) n <- 100 X <- rnorm(n) M <- .30 * X + sqrt(1 - .30^2) * rnorm(n) Y <- .60 * M + sqrt(1 - .60^2) * rnorm(n) Data <- data.frame(X = X,                    Y = Y,                    M = M) model <- \" # direct effect   Y ~ c*X # mediator   M ~ a*X   Y ~ b*M # indirect effect (a*b)   ab := a*b # total effect   total := c + (a*b) \" fit <- sem(model,            data = Data,            se = \"bootstrap\",            bootstrap = 5000,            parallel = \"snow\",            ncpus = 4,            iseed = 1234) parameterEstimates(fit) #>     lhs op     rhs label   est    se     z pvalue ci.lower ci.upper #> 1     Y  ~       X     c 0.008 0.071 0.117  0.906   -0.135    0.141 #> 2     M  ~       X     a 0.390 0.076 5.133  0.000    0.235    0.534 #> 3     Y  ~       M     b 0.505 0.087 5.814  0.000    0.331    0.668 #> 4     Y ~~       Y       0.541 0.076 7.121  0.000    0.383    0.682 #> 5     M ~~       M       0.911 0.117 7.798  0.000    0.674    1.135 #> 6     X ~~       X       1.230 0.000    NA     NA    1.230    1.230 #> 7    ab :=     a*b    ab 0.197 0.049 3.986  0.000    0.106    0.296 #> 8 total := c+(a*b) total 0.205 0.081 2.519  0.012    0.040    0.361"},{"path":[]},{"path":"https://sfcheung.github.io/semhelpinghands/articles/plot_boot.html","id":"free-parameters","dir":"Articles","previous_headings":"Plot Bootstrap Distribution","what":"Free Parameters","title":"Diagnostic Plots of Bootstrap Estimates","text":"plot distribution bootstrap estimates free parameter (user-defined parameter, .e., ab), call plot_boot(). following sample call plot bootstrap estimates b path: required arguments: first argument output lavaan. argument param name parameter plotted, appeared call coef(). argument standardized required. indicates whether bootstrap estimates standardized solution plotted. argument qq_dot_size optional, controlling size points normal QQ-plot. plot  plot similar output boot::boot(). left panel histogram : red dotted line represent point estimate parameter (estimate b lavaan output example). kernel density plot (blue line) distribution. right panel normal QQ-plot generated qqnorm() qqline(). distribution normal, points lie line. Deviation normal distribution manifested points deviate line vertically, usually lower upper end distribution.","code":"library(semhelpinghands) plot_boot(fit,           param = \"b\",           standardized = FALSE,           qq_dot_size = 1)"},{"path":"https://sfcheung.github.io/semhelpinghands/articles/plot_boot.html","id":"user-defined-parameters","dir":"Articles","previous_headings":"Plot Bootstrap Distribution","what":"User-Defined Parameters","title":"Diagnostic Plots of Bootstrap Estimates","text":"bootstrap estimates free parameters stored lavaan. plot distribution bootstrap estimates, call store_boot_def() first compute bootstrap estimates user-defined parameters store back output lavaan.1 computed stored, plot_boot() can used . example, plot distribution ab, indirect effect, just set param \"ab\".  plot suggests , expected, sampling distribution indirect effect normal (positively skewed).","code":"fit <- store_boot_def(fit) plot_boot(fit,           param = \"ab\",           standardized = FALSE,           qq_dot_size = 1)"},{"path":"https://sfcheung.github.io/semhelpinghands/articles/plot_boot.html","id":"standardized-solution","dir":"Articles","previous_headings":"Plot Bootstrap Distribution","what":"Standardized Solution","title":"Diagnostic Plots of Bootstrap Estimates","text":"plot bootstrap estimates standardized solution, standardized regression coefficients, correlations, standardized indirect effect, first call store_boot_est_std() compute bootstrap estimates standardized solution store back output lavaan.2 computed stored, plot_boot() can used . example, plot distribution standardized indirect effect, just set param \"ab\" set standardized TRUE:  Note unusual parameter nonnormal sampling distribution standardized solution. example, plot bootstrap estimates standardized path M Y:  Compared previous plot b original (unstandardized) solution, distribution nonnormal (negatively skewed).","code":"fit <- store_boot_est_std(fit) plot_boot(fit,           param = \"ab\",           standardized = TRUE,           qq_dot_size = 1) plot_boot(fit,           param = \"b\",           standardized = TRUE,           qq_dot_size = 1)"},{"path":"https://sfcheung.github.io/semhelpinghands/articles/plot_boot.html","id":"customizing-the-plots","dir":"Articles","previous_headings":"","what":"Customizing the Plots","title":"Diagnostic Plots of Bootstrap Estimates","text":"Users can customize lot aspects plot, color lines, number bars, size dots normal QQ-plot. Please refer help page plot_boot() arguments available.","code":""},{"path":[]},{"path":"https://sfcheung.github.io/semhelpinghands/articles/semhelpinghands.html","id":"introduction","dir":"Articles","previous_headings":"","what":"Introduction","title":"semhelpinghands","text":"time writing, semhelpinghands groups functions: manipulating parameter estimates tables, comparing results different methods, bootstrapping, … others. article introduce briefly groups. introduced details forthcoming article dedicated . Let’s load package first, also load lavaan.","code":"library(semhelpinghands) library(lavaan) #> This is lavaan 0.6-16 #> lavaan is FREE software! Please report any bugs."},{"path":"https://sfcheung.github.io/semhelpinghands/articles/semhelpinghands.html","id":"manipulate-parameter-estimates-tables","dir":"Articles","previous_headings":"","what":"Manipulate Parameter Estimates Tables","title":"semhelpinghands","text":"using lavaan, prefer reading output parameterEstimates(), compact clear . sometimes like organize rows columns ways meaningful particular research questions. can certainly done using base R dplyr. However, lazy want able things using just one two functions, just one two arguments. sample dataset illustration, dvs_ivs, 3 predictors (x1, x2, x3), 3 outcome variables (y1 y2, y3), group variable (gp). First single sample model: parameter estimates tables: two-sample model also fitted dataset: parameter estimates table: , semhelpinghands now:","code":"data(dvs_ivs) mod <- \" y1 ~ x1 + x2 + x3 y2 ~ x1 + x3 y3 ~ y2 + x2 \" fit <- sem(model = mod,            data = dvs_ivs,            fixed.x = FALSE) est <- parameterEstimates(fit) est #>    lhs op rhs    est    se      z pvalue ci.lower ci.upper #> 1   y1  ~  x1  0.206 0.087  2.354  0.019    0.034    0.377 #> 2   y1  ~  x2  0.381 0.093  4.100  0.000    0.199    0.563 #> 3   y1  ~  x3  0.162 0.088  1.852  0.064   -0.009    0.334 #> 4   y2  ~  x1  0.149 0.105  1.425  0.154   -0.056    0.354 #> 5   y2  ~  x3  0.230 0.105  2.187  0.029    0.024    0.437 #> 6   y3  ~  y2  0.044 0.106  0.420  0.675   -0.163    0.251 #> 7   y3  ~  x2  0.295 0.121  2.445  0.014    0.059    0.532 #> 8   y1 ~~  y1  0.695 0.098  7.071  0.000    0.502    0.888 #> 9   y2 ~~  y2  1.013 0.143  7.071  0.000    0.732    1.294 #> 10  y3 ~~  y3  1.206 0.171  7.071  0.000    0.872    1.540 #> 11  y1 ~~  y3 -0.027 0.092 -0.292  0.770   -0.206    0.153 #> 12  x1 ~~  x1  0.926 0.131  7.071  0.000    0.669    1.183 #> 13  x1 ~~  x2  0.118 0.088  1.339  0.180   -0.055    0.291 #> 14  x1 ~~  x3  0.000 0.092 -0.001  0.999   -0.180    0.180 #> 15  x2 ~~  x2  0.828 0.117  7.071  0.000    0.598    1.057 #> 16  x2 ~~  x3  0.073 0.087  0.840  0.401   -0.098    0.244 #> 17  x3 ~~  x3  0.912 0.129  7.071  0.000    0.659    1.165 fit_gp <- sem(model = mod,               data = dvs_ivs,               group = \"gp\",               fixed.x = FALSE) est_gp <- parameterEstimates(fit_gp) est_gp #>    lhs op rhs block group    est    se      z pvalue ci.lower ci.upper #> 1   y1  ~  x1     1     1  0.210 0.149  1.404  0.160   -0.083    0.502 #> 2   y1  ~  x2     1     1  0.243 0.138  1.761  0.078   -0.027    0.513 #> 3   y1  ~  x3     1     1  0.246 0.144  1.710  0.087   -0.036    0.527 #> 4   y2  ~  x1     1     1  0.036 0.179  0.199  0.842   -0.315    0.386 #> 5   y2  ~  x3     1     1  0.217 0.176  1.232  0.218   -0.128    0.561 #> 6   y3  ~  y2     1     1  0.096 0.120  0.802  0.423   -0.139    0.332 #> 7   y3  ~  x2     1     1  0.372 0.135  2.754  0.006    0.107    0.637 #> 8   y1 ~~  y1     1     1  0.754 0.157  4.796  0.000    0.446    1.062 #> 9   y2 ~~  y2     1     1  1.148 0.239  4.796  0.000    0.679    1.617 #> 10  y3 ~~  y3     1     1  0.787 0.164  4.796  0.000    0.466    1.109 #> 11  y1 ~~  y3     1     1  0.010 0.114  0.085  0.932   -0.213    0.232 #> 12  x1 ~~  x1     1     1  0.798 0.166  4.796  0.000    0.472    1.125 #> 13  x1 ~~  x2     1     1  0.223 0.132  1.694  0.090   -0.035    0.481 #> 14  x1 ~~  x3     1     1  0.121 0.121  1.001  0.317   -0.116    0.358 #> 15  x2 ~~  x2     1     1  0.938 0.196  4.796  0.000    0.555    1.321 #> 16  x2 ~~  x3     1     1  0.139 0.131  1.061  0.289   -0.118    0.397 #> 17  x3 ~~  x3     1     1  0.825 0.172  4.796  0.000    0.488    1.162 #> 18  y1 ~1         1     1 -0.295 0.137 -2.148  0.032   -0.564   -0.026 #> 19  y2 ~1         1     1  0.027 0.168  0.163  0.870   -0.302    0.357 #> 20  y3 ~1         1     1  0.233 0.131  1.775  0.076   -0.024    0.490 #> 21  x1 ~1         1     1  0.282 0.132  2.141  0.032    0.024    0.540 #> 22  x2 ~1         1     1 -0.067 0.143 -0.469  0.639   -0.347    0.213 #> 23  x3 ~1         1     1 -0.123 0.134 -0.915  0.360   -0.385    0.140 #> 24  y1  ~  x1     2     2  0.258 0.102  2.530  0.011    0.058    0.458 #> 25  y1  ~  x2     2     2  0.484 0.121  3.998  0.000    0.247    0.721 #> 26  y1  ~  x3     2     2  0.121 0.104  1.165  0.244   -0.082    0.324 #> 27  y2  ~  x1     2     2  0.226 0.127  1.774  0.076   -0.024    0.475 #> 28  y2  ~  x3     2     2  0.261 0.129  2.016  0.044    0.007    0.514 #> 29  y3  ~  y2     2     2 -0.003 0.162 -0.020  0.984   -0.322    0.315 #> 30  y3  ~  x2     2     2  0.291 0.190  1.527  0.127   -0.082    0.664 #> 31  y1 ~~  y1     2     2  0.568 0.109  5.196  0.000    0.354    0.783 #> 32  y2 ~~  y2     2     2  0.882 0.170  5.196  0.000    0.549    1.214 #> 33  y3 ~~  y3     2     2  1.412 0.272  5.196  0.000    0.880    1.945 #> 34  y1 ~~  y3     2     2  0.050 0.122  0.410  0.682   -0.189    0.289 #> 35  x1 ~~  x1     2     2  1.020 0.196  5.196  0.000    0.635    1.405 #> 36  x1 ~~  x2     2     2  0.042 0.117  0.361  0.718   -0.187    0.271 #> 37  x1 ~~  x3     2     2 -0.099 0.137 -0.719  0.472   -0.367    0.170 #> 38  x2 ~~  x2     2     2  0.722 0.139  5.196  0.000    0.450    0.994 #> 39  x2 ~~  x3     2     2  0.013 0.115  0.110  0.912   -0.212    0.238 #> 40  x3 ~~  x3     2     2  0.985 0.190  5.196  0.000    0.613    1.356 #> 41  y1 ~1         2     2  0.007 0.104  0.068  0.946   -0.196    0.211 #> 42  y2 ~1         2     2 -0.050 0.129 -0.392  0.695   -0.303    0.202 #> 43  y3 ~1         2     2 -0.333 0.163 -2.042  0.041   -0.652   -0.013 #> 44  x1 ~1         2     2  0.101 0.137  0.738  0.460   -0.168    0.371 #> 45  x2 ~1         2     2  0.092 0.116  0.797  0.425   -0.134    0.319 #> 46  x3 ~1         2     2 -0.065 0.135 -0.482  0.630   -0.330    0.200"},{"path":"https://sfcheung.github.io/semhelpinghands/articles/semhelpinghands.html","id":"add-significance-test-results-add_sig","dir":"Articles","previous_headings":"Manipulate Parameter Estimates Tables","what":"Add Significance Test Results: add_sig()","title":"semhelpinghands","text":"Despite controversy null hypothesis significance testing, still need report , now. , decode mentally. comes add_sig(): bootstrapping used, also supports using confidence intervals, may yield results different p-values bootstrapping confidence intervals used (results example): also works standardized solution: Note: careful interpretation p-values standardized solution, based delta method. See vignette(\"standardizedSolution_boot_ci\"). See help page add_sig() options.","code":"add_sig(est) #>    lhs op rhs    est sig    se      z pvalue ci.lower ci.upper #> 1   y1  ~  x1  0.206 *   0.087  2.354  0.019    0.034    0.377 #> 2   y1  ~  x2  0.381 *** 0.093  4.100  0.000    0.199    0.563 #> 3   y1  ~  x3  0.162     0.088  1.852  0.064   -0.009    0.334 #> 4   y2  ~  x1  0.149     0.105  1.425  0.154   -0.056    0.354 #> 5   y2  ~  x3  0.230 *   0.105  2.187  0.029    0.024    0.437 #> 6   y3  ~  y2  0.044     0.106  0.420  0.675   -0.163    0.251 #> 7   y3  ~  x2  0.295 *   0.121  2.445  0.014    0.059    0.532 #> 8   y1 ~~  y1  0.695 *** 0.098  7.071  0.000    0.502    0.888 #> 9   y2 ~~  y2  1.013 *** 0.143  7.071  0.000    0.732    1.294 #> 10  y3 ~~  y3  1.206 *** 0.171  7.071  0.000    0.872    1.540 #> 11  y1 ~~  y3 -0.027     0.092 -0.292  0.770   -0.206    0.153 #> 12  x1 ~~  x1  0.926 *** 0.131  7.071  0.000    0.669    1.183 #> 13  x1 ~~  x2  0.118     0.088  1.339  0.180   -0.055    0.291 #> 14  x1 ~~  x3  0.000     0.092 -0.001  0.999   -0.180    0.180 #> 15  x2 ~~  x2  0.828 *** 0.117  7.071  0.000    0.598    1.057 #> 16  x2 ~~  x3  0.073     0.087  0.840  0.401   -0.098    0.244 #> 17  x3 ~~  x3  0.912 *** 0.129  7.071  0.000    0.659    1.165 add_sig(est,         use = c(\"pvalue\", \"ci\")) #>    lhs op rhs    est sig  ci    se      z pvalue ci.lower ci.upper #> 1   y1  ~  x1  0.206 *   Sig 0.087  2.354  0.019    0.034    0.377 #> 2   y1  ~  x2  0.381 *** Sig 0.093  4.100  0.000    0.199    0.563 #> 3   y1  ~  x3  0.162         0.088  1.852  0.064   -0.009    0.334 #> 4   y2  ~  x1  0.149         0.105  1.425  0.154   -0.056    0.354 #> 5   y2  ~  x3  0.230 *   Sig 0.105  2.187  0.029    0.024    0.437 #> 6   y3  ~  y2  0.044         0.106  0.420  0.675   -0.163    0.251 #> 7   y3  ~  x2  0.295 *   Sig 0.121  2.445  0.014    0.059    0.532 #> 8   y1 ~~  y1  0.695 *** Sig 0.098  7.071  0.000    0.502    0.888 #> 9   y2 ~~  y2  1.013 *** Sig 0.143  7.071  0.000    0.732    1.294 #> 10  y3 ~~  y3  1.206 *** Sig 0.171  7.071  0.000    0.872    1.540 #> 11  y1 ~~  y3 -0.027         0.092 -0.292  0.770   -0.206    0.153 #> 12  x1 ~~  x1  0.926 *** Sig 0.131  7.071  0.000    0.669    1.183 #> 13  x1 ~~  x2  0.118         0.088  1.339  0.180   -0.055    0.291 #> 14  x1 ~~  x3  0.000         0.092 -0.001  0.999   -0.180    0.180 #> 15  x2 ~~  x2  0.828 *** Sig 0.117  7.071  0.000    0.598    1.057 #> 16  x2 ~~  x3  0.073         0.087  0.840  0.401   -0.098    0.244 #> 17  x3 ~~  x3  0.912 *** Sig 0.129  7.071  0.000    0.659    1.165 std <- standardizedSolution(fit) add_sig(std) #>    lhs op rhs est.std sig    se      z pvalue ci.lower ci.upper #> 1   y1  ~  x1   0.208 *   0.087  2.394  0.017    0.038    0.378 #> 2   y1  ~  x2   0.364 *** 0.083  4.364  0.000    0.200    0.527 #> 3   y1  ~  x3   0.163     0.087  1.871  0.061   -0.008    0.333 #> 4   y2  ~  x1   0.138     0.096  1.438  0.150   -0.050    0.326 #> 5   y2  ~  x3   0.212 *   0.095  2.236  0.025    0.026    0.397 #> 6   y3  ~  y2   0.041     0.097  0.420  0.674   -0.149    0.231 #> 7   y3  ~  x2   0.237 *   0.094  2.517  0.012    0.053    0.422 #> 8   y1 ~~  y1   0.767 *** 0.074 10.369  0.000    0.622    0.912 #> 9   y2 ~~  y2   0.936 *** 0.047 19.799  0.000    0.844    1.029 #> 10  y3 ~~  y3   0.941 *** 0.046 20.649  0.000    0.852    1.031 #> 11  y1 ~~  y3  -0.029     0.100 -0.292  0.770   -0.225    0.167 #> 12  x1 ~~  x1   1.000     0.000     NA     NA    1.000    1.000 #> 13  x1 ~~  x2   0.135     0.098  1.377  0.169   -0.057    0.328 #> 14  x1 ~~  x3   0.000     0.100 -0.001  0.999   -0.196    0.196 #> 15  x2 ~~  x2   1.000     0.000     NA     NA    1.000    1.000 #> 16  x2 ~~  x3   0.084     0.099  0.849  0.396   -0.110    0.279 #> 17  x3 ~~  x3   1.000     0.000     NA     NA    1.000    1.000"},{"path":"https://sfcheung.github.io/semhelpinghands/articles/semhelpinghands.html","id":"filter-by-operators-and-some-other-columns-filter_by","dir":"Articles","previous_headings":"Manipulate Parameter Estimates Tables","what":"Filter by Operators and Some Other Columns: filter_by()","title":"semhelpinghands","text":"purpose simple, selecting rows commonly used columns: operators (op), “dependent variables” (lhs), “independent variables” (rhs). also supports filtering group using group labels: See help page filter_by() options.","code":"filter_by(est,           op = \"~\") #>   lhs op rhs   est    se     z pvalue ci.lower ci.upper #> 1  y1  ~  x1 0.206 0.087 2.354  0.019    0.034    0.377 #> 2  y1  ~  x2 0.381 0.093 4.100  0.000    0.199    0.563 #> 3  y1  ~  x3 0.162 0.088 1.852  0.064   -0.009    0.334 #> 4  y2  ~  x1 0.149 0.105 1.425  0.154   -0.056    0.354 #> 5  y2  ~  x3 0.230 0.105 2.187  0.029    0.024    0.437 #> 6  y3  ~  y2 0.044 0.106 0.420  0.675   -0.163    0.251 #> 7  y3  ~  x2 0.295 0.121 2.445  0.014    0.059    0.532 filter_by(est_gp,           op = \"~\",           group = \"gp1\",           fit = fit_gp) #>   lhs op rhs block group   est    se     z pvalue ci.lower ci.upper #> 1  y1  ~  x1     1     1 0.210 0.149 1.404  0.160   -0.083    0.502 #> 2  y1  ~  x2     1     1 0.243 0.138 1.761  0.078   -0.027    0.513 #> 3  y1  ~  x3     1     1 0.246 0.144 1.710  0.087   -0.036    0.527 #> 4  y2  ~  x1     1     1 0.036 0.179 0.199  0.842   -0.315    0.386 #> 5  y2  ~  x3     1     1 0.217 0.176 1.232  0.218   -0.128    0.561 #> 6  y3  ~  y2     1     1 0.096 0.120 0.802  0.423   -0.139    0.332 #> 7  y3  ~  x2     1     1 0.372 0.135 2.754  0.006    0.107    0.637"},{"path":"https://sfcheung.github.io/semhelpinghands/articles/semhelpinghands.html","id":"group-by-dvs-or-group-by-ivs-group_by_dvs-and-group_by_ivs","dir":"Articles","previous_headings":"Manipulate Parameter Estimates Tables","what":"Group By DVs or Group By IVs: group_by_dvs() and group_by_ivs()","title":"semhelpinghands","text":"Sometimes want conventional iv-column-dv-row dv-column-iv-row format. ’s group_by_dvs() group_by_ivs() : also supports extracting another column: See help page group_by_dvs() group_by_ivs() options.","code":"group_by_dvs(est) #>    iv est_y1 est_y2 est_y3 #> x1 x1  0.206  0.149     -- #> x2 x2  0.381     --  0.295 #> x3 x3  0.162  0.230     -- #> y2 y2     --     --  0.044 group_by_ivs(est) #>    dv est_x1 est_x2 est_x3 est_y2 #> y1 y1  0.206  0.381  0.162     -- #> y2 y2  0.149     --  0.230     -- #> y3 y3     --  0.295     --  0.044 group_by_dvs(est,              col_name = \"pvalue\") #>    iv pvalue_y1 pvalue_y2 pvalue_y3 #> x1 x1     0.019     0.154        -- #> x2 x2     0.000        --     0.014 #> x3 x3     0.064     0.029        -- #> y2 y2        --        --     0.675 group_by_ivs(est,              col_name = \"pvalue\") #>    dv pvalue_x1 pvalue_x2 pvalue_x3 pvalue_y2 #> y1 y1     0.019     0.000     0.064        -- #> y2 y2     0.154        --     0.029        -- #> y3 y3        --     0.014        --     0.675"},{"path":"https://sfcheung.github.io/semhelpinghands/articles/semhelpinghands.html","id":"group-by-groups-group_by_groups","dir":"Articles","previous_headings":"Manipulate Parameter Estimates Tables","what":"Group By Groups: group_by_groups()","title":"semhelpinghands","text":"multiple sample models, one common task comparing results across groups. wrote group_by_groups() task, compare results side--side: also supports extracting several columns: fit object used, can print group labels: See help page group_by_groups() options.","code":"group_by_groups(est_gp) #>    lhs op rhs  est_1  est_2 #> 1   y1  ~  x1  0.210  0.258 #> 2   y1  ~  x2  0.243  0.484 #> 3   y1  ~  x3  0.246  0.121 #> 4   y2  ~  x1  0.036  0.226 #> 5   y2  ~  x3  0.217  0.261 #> 6   y3  ~  x2  0.372  0.291 #> 7   y3  ~  y2  0.096 -0.003 #> 8   x1 ~~  x1  0.798  1.020 #> 9   x1 ~~  x2  0.223  0.042 #> 10  x1 ~~  x3  0.121 -0.099 #> 11  x2 ~~  x2  0.938  0.722 #> 12  x2 ~~  x3  0.139  0.013 #> 13  x3 ~~  x3  0.825  0.985 #> 14  y1 ~~  y1  0.754  0.568 #> 15  y1 ~~  y3  0.010  0.050 #> 16  y2 ~~  y2  1.148  0.882 #> 17  y3 ~~  y3  0.787  1.412 #> 18  x1 ~1      0.282  0.101 #> 19  x2 ~1     -0.067  0.092 #> 20  x3 ~1     -0.123 -0.065 #> 21  y1 ~1     -0.295  0.007 #> 22  y2 ~1      0.027 -0.050 #> 23  y3 ~1      0.233 -0.333 group_by_groups(est_gp,                 col_names = c(\"est\", \"pvalue\")) #>    lhs op rhs  est_1  est_2 pvalue_1 pvalue_2 #> 1   y1  ~  x1  0.210  0.258    0.160    0.011 #> 2   y1  ~  x2  0.243  0.484    0.078    0.000 #> 3   y1  ~  x3  0.246  0.121    0.087    0.244 #> 4   y2  ~  x1  0.036  0.226    0.842    0.076 #> 5   y2  ~  x3  0.217  0.261    0.218    0.044 #> 6   y3  ~  x2  0.372  0.291    0.006    0.127 #> 7   y3  ~  y2  0.096 -0.003    0.423    0.984 #> 8   x1 ~~  x1  0.798  1.020    0.000    0.000 #> 9   x1 ~~  x2  0.223  0.042    0.090    0.718 #> 10  x1 ~~  x3  0.121 -0.099    0.317    0.472 #> 11  x2 ~~  x2  0.938  0.722    0.000    0.000 #> 12  x2 ~~  x3  0.139  0.013    0.289    0.912 #> 13  x3 ~~  x3  0.825  0.985    0.000    0.000 #> 14  y1 ~~  y1  0.754  0.568    0.000    0.000 #> 15  y1 ~~  y3  0.010  0.050    0.932    0.682 #> 16  y2 ~~  y2  1.148  0.882    0.000    0.000 #> 17  y3 ~~  y3  0.787  1.412    0.000    0.000 #> 18  x1 ~1      0.282  0.101    0.032    0.460 #> 19  x2 ~1     -0.067  0.092    0.639    0.425 #> 20  x3 ~1     -0.123 -0.065    0.360    0.630 #> 21  y1 ~1     -0.295  0.007    0.032    0.946 #> 22  y2 ~1      0.027 -0.050    0.870    0.695 #> 23  y3 ~1      0.233 -0.333    0.076    0.041 group_by_groups(fit_gp,                 col_names = c(\"est\", \"pvalue\")) #>    lhs op rhs est_gp1 est_gp2 pvalue_gp1 pvalue_gp2 #> 1   y1  ~  x1   0.210   0.258      0.160      0.011 #> 2   y1  ~  x2   0.243   0.484      0.078      0.000 #> 3   y1  ~  x3   0.246   0.121      0.087      0.244 #> 4   y2  ~  x1   0.036   0.226      0.842      0.076 #> 5   y2  ~  x3   0.217   0.261      0.218      0.044 #> 6   y3  ~  x2   0.372   0.291      0.006      0.127 #> 7   y3  ~  y2   0.096  -0.003      0.423      0.984 #> 8   x1 ~~  x1   0.798   1.020      0.000      0.000 #> 9   x1 ~~  x2   0.223   0.042      0.090      0.718 #> 10  x1 ~~  x3   0.121  -0.099      0.317      0.472 #> 11  x2 ~~  x2   0.938   0.722      0.000      0.000 #> 12  x2 ~~  x3   0.139   0.013      0.289      0.912 #> 13  x3 ~~  x3   0.825   0.985      0.000      0.000 #> 14  y1 ~~  y1   0.754   0.568      0.000      0.000 #> 15  y1 ~~  y3   0.010   0.050      0.932      0.682 #> 16  y2 ~~  y2   1.148   0.882      0.000      0.000 #> 17  y3 ~~  y3   0.787   1.412      0.000      0.000 #> 18  x1 ~1       0.282   0.101      0.032      0.460 #> 19  x2 ~1      -0.067   0.092      0.639      0.425 #> 20  x3 ~1      -0.123  -0.065      0.360      0.630 #> 21  y1 ~1      -0.295   0.007      0.032      0.946 #> 22  y2 ~1       0.027  -0.050      0.870      0.695 #> 23  y3 ~1       0.233  -0.333      0.076      0.041"},{"path":"https://sfcheung.github.io/semhelpinghands/articles/semhelpinghands.html","id":"compare-models-group_by_models","dir":"Articles","previous_headings":"Manipulate Parameter Estimates Tables","what":"Compare Models: group_by_models()","title":"semhelpinghands","text":"inspired proposal Rönkkö proposed GitHub issue semTools. want something simple quick overview wrote group_by_models(). Suppose model fitted: two models nested relationships. compare estimates, group_by_models() can used: can also compare several columns: See help page group_by_models() options.","code":"mod2 <- \" y1 ~ x1 + x2 + x3 y2 ~ x1 + x2 y3 ~ y2 + x1 \" fit2 <- sem(model = mod2,             data = dvs_ivs,             fixed.x = FALSE) est2 <- parameterEstimates(fit2) est2 #>    lhs op rhs    est    se      z pvalue ci.lower ci.upper #> 1   y1  ~  x1  0.209 0.087  2.394  0.017    0.038    0.381 #> 2   y1  ~  x2  0.387 0.093  4.171  0.000    0.205    0.569 #> 3   y1  ~  x3  0.162 0.088  1.853  0.064   -0.009    0.334 #> 4   y2  ~  x1  0.176 0.106  1.655  0.098   -0.032    0.384 #> 5   y2  ~  x2 -0.209 0.112 -1.864  0.062   -0.430    0.011 #> 6   y3  ~  y2  0.023 0.109  0.210  0.834   -0.190    0.236 #> 7   y3  ~  x1 -0.157 0.117 -1.339  0.181   -0.388    0.073 #> 8   y1 ~~  y1  0.695 0.098  7.071  0.000    0.502    0.888 #> 9   y2 ~~  y2  1.026 0.145  7.071  0.000    0.741    1.310 #> 10  y3 ~~  y3  1.254 0.177  7.071  0.000    0.906    1.601 #> 11  y1 ~~  y3 -0.028 0.093 -0.299  0.765   -0.211    0.155 #> 12  x1 ~~  x1  0.926 0.131  7.071  0.000    0.669    1.183 #> 13  x1 ~~  x2  0.118 0.088  1.339  0.180   -0.055    0.291 #> 14  x1 ~~  x3  0.000 0.092 -0.001  0.999   -0.180    0.180 #> 15  x2 ~~  x2  0.828 0.117  7.071  0.000    0.598    1.057 #> 16  x2 ~~  x3  0.073 0.087  0.840  0.401   -0.098    0.244 #> 17  x3 ~~  x3  0.912 0.129  7.071  0.000    0.659    1.165 group_by_models(list(Model1 = est,                      Model2 = est2)) #>    lhs op rhs est_Model1 est_Model2 #> 1   y1  ~  x1      0.206      0.209 #> 2   y1  ~  x2      0.381      0.387 #> 3   y1  ~  x3      0.162      0.162 #> 4   y2  ~  x1      0.149      0.176 #> 5   y2  ~  x2         NA     -0.209 #> 6   y2  ~  x3      0.230         NA #> 7   y3  ~  x1         NA     -0.157 #> 8   y3  ~  x2      0.295         NA #> 9   y3  ~  y2      0.044      0.023 #> 10  x1 ~~  x1      0.926      0.926 #> 11  x1 ~~  x2      0.118      0.118 #> 12  x1 ~~  x3      0.000      0.000 #> 13  x2 ~~  x2      0.828      0.828 #> 14  x2 ~~  x3      0.073      0.073 #> 15  x3 ~~  x3      0.912      0.912 #> 16  y1 ~~  y1      0.695      0.695 #> 17  y1 ~~  y3     -0.027     -0.028 #> 18  y2 ~~  y2      1.013      1.026 #> 19  y3 ~~  y3      1.206      1.254 group_by_models(list(Model1 = est,                      Model2 = est2),                 col_names = c(\"est\", \"pvalue\")) #>    lhs op rhs est_Model1 est_Model2 pvalue_Model1 pvalue_Model2 #> 1   y1  ~  x1      0.206      0.209         0.019         0.017 #> 2   y1  ~  x2      0.381      0.387         0.000         0.000 #> 3   y1  ~  x3      0.162      0.162         0.064         0.064 #> 4   y2  ~  x1      0.149      0.176         0.154         0.098 #> 5   y2  ~  x2         NA     -0.209            NA         0.062 #> 6   y2  ~  x3      0.230         NA         0.029            NA #> 7   y3  ~  x1         NA     -0.157            NA         0.181 #> 8   y3  ~  x2      0.295         NA         0.014            NA #> 9   y3  ~  y2      0.044      0.023         0.675         0.834 #> 10  x1 ~~  x1      0.926      0.926         0.000         0.000 #> 11  x1 ~~  x2      0.118      0.118         0.180         0.180 #> 12  x1 ~~  x3      0.000      0.000         0.999         0.999 #> 13  x2 ~~  x2      0.828      0.828         0.000         0.000 #> 14  x2 ~~  x3      0.073      0.073         0.401         0.401 #> 15  x3 ~~  x3      0.912      0.912         0.000         0.000 #> 16  y1 ~~  y1      0.695      0.695         0.000         0.000 #> 17  y1 ~~  y3     -0.027     -0.028         0.770         0.765 #> 18  y2 ~~  y2      1.013      1.026         0.000         0.000 #> 19  y3 ~~  y3      1.206      1.254         0.000         0.000"},{"path":"https://sfcheung.github.io/semhelpinghands/articles/semhelpinghands.html","id":"sort-rows-sort_by","dir":"Articles","previous_headings":"Manipulate Parameter Estimates Tables","what":"Sort Rows: sort_by()","title":"semhelpinghands","text":"function sort_by() can used sort rows using () common fields \"op\", \"lhs\", \"rhs\", (b) operators \"~\" \"~~\". can used output functions manipulate parameter estimates table. functions, group_by_models(), automatically call sort_by() sort results. default order acceptable cases, can also customized. See help page sort_by() customizing order.","code":"out <- group_by_groups(est_gp,                        col_names = c(\"est\", \"pvalue\")) out <- filter_by(out,                  op = c(\"~\", \"~~\")) sort_by(out,         by = c(\"op\", \"rhs\")) #>    lhs op rhs est_1  est_2 pvalue_1 pvalue_2 #> 1   y1  ~  x1 0.210  0.258    0.160    0.011 #> 2   y2  ~  x1 0.036  0.226    0.842    0.076 #> 3   y1  ~  x2 0.243  0.484    0.078    0.000 #> 4   y3  ~  x2 0.372  0.291    0.006    0.127 #> 5   y1  ~  x3 0.246  0.121    0.087    0.244 #> 6   y2  ~  x3 0.217  0.261    0.218    0.044 #> 7   y3  ~  y2 0.096 -0.003    0.423    0.984 #> 8   x1 ~~  x1 0.798  1.020    0.000    0.000 #> 9   x1 ~~  x2 0.223  0.042    0.090    0.718 #> 10  x2 ~~  x2 0.938  0.722    0.000    0.000 #> 11  x1 ~~  x3 0.121 -0.099    0.317    0.472 #> 12  x2 ~~  x3 0.139  0.013    0.289    0.912 #> 13  x3 ~~  x3 0.825  0.985    0.000    0.000 #> 14  y1 ~~  y1 0.754  0.568    0.000    0.000 #> 15  y2 ~~  y2 1.148  0.882    0.000    0.000 #> 16  y1 ~~  y3 0.010  0.050    0.932    0.682 #> 17  y3 ~~  y3 0.787  1.412    0.000    0.000"},{"path":"https://sfcheung.github.io/semhelpinghands/articles/semhelpinghands.html","id":"piping","dir":"Articles","previous_headings":"Manipulate Parameter Estimates Tables","what":"Piping","title":"semhelpinghands","text":"Though officially supported, piping using |> can used functions manipulate parameter estimates tables. example:","code":"est_gp |>   add_sig() |>   group_by_groups(col_names = c(\"est\", \"pvalue\", \"sig\"),                   group_first = FALSE) |>   filter_by(op = c(\"~\")) #>   lhs op rhs est_1 pvalue_1 sig_1  est_2 pvalue_2 sig_2 #> 1  y1  ~  x1 0.210    0.160        0.258    0.011   *   #> 2  y1  ~  x2 0.243    0.078        0.484    0.000   *** #> 3  y1  ~  x3 0.246    0.087        0.121    0.244       #> 4  y2  ~  x1 0.036    0.842        0.226    0.076       #> 5  y2  ~  x3 0.217    0.218        0.261    0.044   *   #> 6  y3  ~  x2 0.372    0.006   **   0.291    0.127       #> 7  y3  ~  y2 0.096    0.423       -0.003    0.984"},{"path":"https://sfcheung.github.io/semhelpinghands/articles/semhelpinghands.html","id":"compare-methods","dir":"Articles","previous_headings":"","what":"Compare Methods","title":"semhelpinghands","text":"Though believe choice estimation method justified, suppose want assess sensitivity parameter estimate results methods used, compare_estimators() can used quick way compare results different methods. simply refits models estimator returns results. can treated different “models” processed group_by_models(). se_ratios() wrapper group_by_models() used compare standard errors different estimators output compare_estimators(): See help page compare_estimators() options.","code":"out <- compare_estimators(fit,          estimator = c(\"ML\", \"GLS\", \"MLR\")) group_by_models(out,                 col_names = c(\"se\", \"pvalue\")) #>    lhs op rhs se_ML se_GLS se_MLR pvalue_ML pvalue_GLS pvalue_MLR #> 1   y1  ~  x1 0.087  0.094  0.067     0.019      0.028      0.002 #> 2   y1  ~  x2 0.093  0.100  0.091     0.000      0.000      0.000 #> 3   y1  ~  x3 0.088  0.089  0.084     0.064      0.067      0.053 #> 4   y2  ~  x1 0.105  0.112  0.107     0.154      0.148      0.165 #> 5   y2  ~  x3 0.105  0.107  0.123     0.029      0.028      0.061 #> 6   y3  ~  x2 0.121  0.133  0.111     0.014      0.019      0.008 #> 7   y3  ~  y2 0.106  0.116  0.108     0.675      0.654      0.681 #> 8   x1 ~~  x1 0.131  0.129  0.136     0.000      0.000      0.000 #> 9   x1 ~~  x2 0.088  0.090  0.077     0.180      0.202      0.122 #> 10  x1 ~~  x3 0.092  0.092  0.102     0.999      0.840      0.999 #> 11  x2 ~~  x2 0.117  0.114  0.127     0.000      0.000      0.000 #> 12  x2 ~~  x3 0.087  0.089  0.091     0.401      0.414      0.423 #> 13  x3 ~~  x3 0.129  0.131  0.111     0.000      0.000      0.000 #> 14  y1 ~~  y1 0.098  0.100  0.119     0.000      0.000      0.000 #> 15  y1 ~~  y3 0.092  0.093  0.104     0.770      0.793      0.797 #> 16  y2 ~~  y2 0.143  0.139  0.141     0.000      0.000      0.000 #> 17  y3 ~~  y3 0.171  0.167  0.171     0.000      0.000      0.000 se_ratios(out,           reference = \"ML\") #>    lhs op rhs se_ML se_GLS se_MLR ratio_ML ratio_GLS ratio_MLR #> 1   y1  ~  x1 0.087  0.094  0.067        1     1.072     0.765 #> 2   y1  ~  x2 0.093  0.100  0.091        1     1.073     0.977 #> 3   y1  ~  x3 0.088  0.089  0.084        1     1.013     0.958 #> 4   y2  ~  x1 0.105  0.112  0.107        1     1.068     1.027 #> 5   y2  ~  x3 0.105  0.107  0.123        1     1.011     1.165 #> 6   y3  ~  x2 0.121  0.133  0.111        1     1.101     0.918 #> 7   y3  ~  y2 0.106  0.116  0.108        1     1.099     1.020 #> 8   x1 ~~  x1 0.131  0.129  0.136        1     0.985     1.036 #> 9   x1 ~~  x2 0.088  0.090  0.077        1     1.015     0.867 #> 10  x1 ~~  x3 0.092  0.092  0.102        1     0.999     1.114 #> 11  x2 ~~  x2 0.117  0.114  0.127        1     0.974     1.084 #> 12  x2 ~~  x3 0.087  0.089  0.091        1     1.015     1.049 #> 13  x3 ~~  x3 0.129  0.131  0.111        1     1.012     0.859 #> 14  y1 ~~  y1 0.098  0.100  0.119        1     1.015     1.210 #> 15  y1 ~~  y3 0.092  0.093  0.104        1     1.015     1.134 #> 16  y2 ~~  y2 0.143  0.139  0.141        1     0.973     0.987 #> 17  y3 ~~  y3 0.171  0.167  0.171        1     0.979     1.005"},{"path":"https://sfcheung.github.io/semhelpinghands/articles/semhelpinghands.html","id":"bootstrapping","dir":"Articles","previous_headings":"","what":"Bootstrapping","title":"semhelpinghands","text":"One issue standardized solution confidence intervals. based delta method even se = \"boot\" used. indirect effects, bootstrap confidence intervals commonly used, confidence intervals standardized solution usually reported tools mediation. powerful tools Internet [Google Group lavaan], see thread, address problem. wrote standardizedSolution_boot_ci() replace (obviously can’t), address specific case usually encounter : Generating bootstrap confidence intervals standardized estimates based bootstrap estimates already generated se = \"boot\". Please see vignette(\"standardizedSolution_boot_ci\") illustration standardizedSolution_boot_ci(). Another issue examine bootstrap estimates, distribution estimates. function plot_boot() related functions can used compute bootstrap estimates plot . bootstrap estimates free parameters (stored lavaan), user-defined parameters (computed store_boot_def()), standardized solution (computed store_boot_est_std()) can plotted. Please see article plot_boot() use function.","code":""},{"path":[]},{"path":"https://sfcheung.github.io/semhelpinghands/articles/semhelpinghands.html","id":"showing-the-options-in-a-model","dir":"Articles","previous_headings":"Others","what":"Showing the Options in a Model","title":"semhelpinghands","text":"lavaan::lavaan() wrappers suc lavaan::sem() lavaan::cfa() allow users set several options using estimator: ML, GLS, WLSMV, others. However, easy remember options set estimator. Instead finding output summary(), function shows one table quick overview. example:","code":"data(dvs_ivs) mod <- \" y1 ~ x1 + x2 + x3 y2 ~ x1 + x3 y3 ~ y2 + x2 \" fit_default <- sem(model = mod,                    data = dvs_ivs) show_more_options(fit_default) #>  Options                             Call    Actual   #>  Estimator(s)                        default ML       #>  Standard Error (SE)                 default standard #>  Model Test Statistic(s)             default standard #>  How Missing Data is Handled         default listwise #>  Information Matrix (for SE)         default expected #>  Information Matrix (for Model Test) default expected #>  Mean Structure                      default No       #>  'x' Fixed                           default TRUE fit_MLR <- sem(model = mod,                data = dvs_ivs,                estimator = \"MLR\") show_more_options(fit_MLR) #>  Options                             Call    Actual             #>  Estimator(s)                        MLR     ML                 #>  Standard Error (SE)                 default robust.huber.white #>  Model Test Statistic(s)             default yuan.bentler.mplus #>  How Missing Data is Handled         default listwise           #>  Information Matrix (for SE)         default observed           #>  Information Matrix (for Model Test) default observed           #>  Mean Structure                      default No                 #>  'x' Fixed                           default TRUE fit_MLR_fiml <- sem(model = mod,                     data = dvs_ivs,                     estimator = \"MLR\",                     missing = \"fiml\") show_more_options(fit_MLR_fiml) #>  Options                             Call    Actual             #>  Estimator(s)                        MLR     ML                 #>  Standard Error (SE)                 default robust.huber.white #>  Model Test Statistic(s)             default yuan.bentler.mplus #>  How Missing Data is Handled         fiml    ml                 #>  Information Matrix (for SE)         default observed           #>  Information Matrix (for Model Test) default observed           #>  Mean Structure                      default Yes                #>  'x' Fixed                           default TRUE"},{"path":"https://sfcheung.github.io/semhelpinghands/articles/semhelpinghands.html","id":"recoding-minimization-history","dir":"Articles","previous_headings":"Others","what":"Recoding Minimization History","title":"semhelpinghands","text":"structural equation modeling, closed-form solution rare optimization (minimization) used find /solution. curiosity teaching, wrote function capture minimization history can examine even plot process. function, record_history(), still early development work now common simple scenarios. Please refer help page record_history() learn .","code":""},{"path":"https://sfcheung.github.io/semhelpinghands/articles/semhelpinghands.html","id":"add-covariances-between-exogenous-variables","dir":"Articles","previous_headings":"Others","what":"Add Covariances Between “Exogenous” Variables","title":"semhelpinghands","text":"lavaan, rarely need manually add covariances exogenous variables (defined loose sense: variables appear right-hand side left-hand side ~). However, came situation lavaan (good reasons). example, covariance residual term exogenous variable set free. wrote two simple functions, add_exo_cov() auto_exo_cov(), purpose. Please refer help pages information.","code":""},{"path":"https://sfcheung.github.io/semhelpinghands/articles/standardizedSolution_boot_ci.html","id":"introduction","dir":"Articles","previous_headings":"","what":"Introduction","title":"Bootstrap Confidence Interval for Standardized Solution in lavaan","text":"document introduces function standardizedSolution_boot_ci(), related helpers, package semhelpinghands.","code":""},{"path":"https://sfcheung.github.io/semhelpinghands/articles/standardizedSolution_boot_ci.html","id":"what-standardizedsolution_boot_ci-does","dir":"Articles","previous_headings":"","what":"What standardizedSolution_boot_ci() Does","title":"Bootstrap Confidence Interval for Standardized Solution in lavaan","text":"lavaan, even se = \"bootstrap\", confidence intervals standardized solution bootstrap confidence intervals. problem researchers want form bootstrap confidence intervals parameters standardized indirect effect.1 function standardizedSolution_boot_ci() addresses problem. accepts lavaan::lavaan-class object fitted se = \"bootstrap\" (se = \"boot\") forms percentile confidence intervals based bootstrap estimates stored object.","code":""},{"path":"https://sfcheung.github.io/semhelpinghands/articles/standardizedSolution_boot_ci.html","id":"data-and-model","dir":"Articles","previous_headings":"","what":"Data and Model","title":"Bootstrap Confidence Interval for Standardized Solution in lavaan","text":"mediation model example modified official lavaan website used (https://lavaan.ugent./tutorial/mediation.html). model fitted se = \"bootstrap\" 5000 replication. (Change ncpus value appropriate system running .) (Note warning bootstrap runs normal. failed runs used forming confidence intervals.) standardized solution delta-method confidence intervals.","code":"library(lavaan) set.seed(1234) n <- 100 # X drawn from a Chi-square distribution with df = 2 X <- (rchisq(n, df = 2) - 2) / sqrt(2 * 2) M <- .40 * X + sqrt(1 - .40^2) * rnorm(n) Y <- .30 * M + sqrt(1 - .30^2) * rnorm(n) Data <- data.frame(X = X,                    Y = Y,                    M = M) model <- \" # direct effect   Y ~ c*X # mediator   M ~ a*X   Y ~ b*M # indirect effect (a*b)   ab := a*b # total effect   total := c + (a*b) \" fit <- sem(model,            data = Data,            se = \"bootstrap\",            bootstrap = 5000,            parallel = \"snow\",            ncpus = 4,            iseed = 1234) standardizedSolution(fit) #>     lhs op     rhs label est.std    se      z pvalue ci.lower ci.upper #> 1     Y  ~       X     c   0.054 0.118  0.461  0.645   -0.176    0.285 #> 2     M  ~       X     a   0.370 0.098  3.768  0.000    0.178    0.563 #> 3     Y  ~       M     b   0.255 0.097  2.622  0.009    0.064    0.446 #> 4     Y ~~       Y         0.922 0.055 16.653  0.000    0.813    1.030 #> 5     M ~~       M         0.863 0.073 11.866  0.000    0.720    1.006 #> 6     X ~~       X         1.000 0.000     NA     NA    1.000    1.000 #> 7    ab :=     a*b    ab   0.094 0.045  2.093  0.036    0.006    0.183 #> 8 total := c+(a*b) total   0.149 0.108  1.375  0.169   -0.063    0.361"},{"path":"https://sfcheung.github.io/semhelpinghands/articles/standardizedSolution_boot_ci.html","id":"bootstrap-percentile-cis-for-standardized-solution","dir":"Articles","previous_headings":"","what":"Bootstrap Percentile CIs for Standardized Solution","title":"Bootstrap Confidence Interval for Standardized Solution in lavaan","text":"form bootstrap percentile confidence intervals standardized solution, simply use standardizedSolution_boot_ci() instead lavaan::standardizedSolution(): bootstrap percentile confidence intervals appended right original output lavaan::standardizedSolution(), columns boot.ci.lower boot.ci.upper. standard errors based bootstrap estimates (standard deviation estimates) listed column boot.se. expected, bootstrap percentile confidence interval indirect effect, ab, [0.016, 0.202], wider delta-method confidence interval, [0.006, 0.183], shifted right.","code":"library(semhelpinghands) ci_boot <- standardizedSolution_boot_ci(fit) ci_boot #>     lhs op     rhs label est.std    se      z pvalue ci.lower ci.upper #> 1     Y  ~       X     c   0.054 0.118  0.461  0.645   -0.176    0.285 #> 2     M  ~       X     a   0.370 0.098  3.768  0.000    0.178    0.563 #> 3     Y  ~       M     b   0.255 0.097  2.622  0.009    0.064    0.446 #> 4     Y ~~       Y         0.922 0.055 16.653  0.000    0.813    1.030 #> 5     M ~~       M         0.863 0.073 11.866  0.000    0.720    1.006 #> 6     X ~~       X         1.000 0.000     NA     NA    1.000    1.000 #> 7    ab :=     a*b    ab   0.094 0.045  2.093  0.036    0.006    0.183 #> 8 total := c+(a*b) total   0.149 0.108  1.375  0.169   -0.063    0.361 #>   boot.ci.lower boot.ci.upper boot.se #> 1        -0.171         0.286   0.117 #> 2         0.144         0.537   0.101 #> 3         0.061         0.443   0.097 #> 4         0.766         0.986   0.058 #> 5         0.712         0.979   0.070 #> 6            NA            NA      NA #> 7         0.016         0.202   0.047 #> 8        -0.048         0.362   0.106"},{"path":"https://sfcheung.github.io/semhelpinghands/articles/standardizedSolution_boot_ci.html","id":"print-in-a-friendly-format","dir":"Articles","previous_headings":"","what":"Print in a Friendly Format","title":"Bootstrap Confidence Interval for Standardized Solution in lavaan","text":"print-method output standardizedSolution_boot_ci() supports printing results text Format similar summary lavaan output. Call print() directly add output = \"text\": Note replace results unstandardized solution standardized solution. print unstandardized standardized results text-format, add standardized_only = FALSE calling print().","code":"print(ci_boot,       output = \"text\") #>  #> Standardized Estimates Only #>  #>   Standard errors                            Bootstrap #>   Confidence interval                        Bootstrap #>   Confidence Level                               95.0% #>   Standardization Type                         std.all #>   Number of requested bootstrap draws             5000 #>   Number of successful bootstrap draws            5000 #>  #> Regressions: #>                Standardized  Std.Err ci.lower ci.upper #>   Y ~                                                  #>     X          (c)    0.054    0.117   -0.171    0.286 #>   M ~                                                  #>     X          (a)    0.370    0.101    0.144    0.537 #>   Y ~                                                  #>     M          (b)    0.255    0.097    0.061    0.443 #>  #> Variances: #>                Standardized  Std.Err ci.lower ci.upper #>    .Y                 0.922    0.058    0.766    0.986 #>    .M                 0.863    0.070    0.712    0.979 #>  #> Defined Parameters: #>                Standardized  Std.Err ci.lower ci.upper #>     ab                0.094    0.047    0.016    0.202 #>     total             0.149    0.106   -0.048    0.362"},{"path":"https://sfcheung.github.io/semhelpinghands/articles/standardizedSolution_boot_ci.html","id":"note","dir":"Articles","previous_headings":"","what":"Note","title":"Bootstrap Confidence Interval for Standardized Solution in lavaan","text":"function standardizedSolution_boot_ci() takes time run retrieves estimates unstandardized solution bootstrap sample computes estimates standardized solution. Therefore, 5,000 bootstrap samples requested, process repeated 5,000 times. Nevertheless, still much faster fitting model 5,000 times .","code":""},{"path":"https://sfcheung.github.io/semhelpinghands/articles/standardizedSolution_boot_ci.html","id":"background","dir":"Articles","previous_headings":"","what":"Background","title":"Bootstrap Confidence Interval for Standardized Solution in lavaan","text":"function originally proposed issue GitHub, inspired discussion Google group lavaan. versatile function used “tricks” work. reliable way use function like lavaan::bootstrapLavaan(). Nevertheless, simple function good enough cases encountered work.","code":""},{"path":"https://sfcheung.github.io/semhelpinghands/authors.html","id":null,"dir":"","previous_headings":"","what":"Authors","title":"Authors and Citation","text":"Shu Fai Cheung. Author, maintainer.","code":""},{"path":"https://sfcheung.github.io/semhelpinghands/authors.html","id":"citation","dir":"","previous_headings":"","what":"Citation","title":"Authors and Citation","text":"Cheung S (2023). semhelpinghands: Helper Functions Structural Equation Modeling. R package version 0.1.9.5, https://sfcheung.github.io/semhelpinghands/.","code":"@Manual{,   title = {semhelpinghands: Helper Functions for Structural Equation Modeling},   author = {Shu Fai Cheung},   year = {2023},   note = {R package version 0.1.9.5},   url = {https://sfcheung.github.io/semhelpinghands/}, }"},{"path":"https://sfcheung.github.io/semhelpinghands/index.html","id":"semhelpinghands-","dir":"","previous_headings":"","what":"Helper Functions for Structural Equation Modeling","title":"Helper Functions for Structural Equation Modeling","text":"(Version 0.1.9.5 updated 2023-09-25, release history) package assortment time-saving helper functions structural equation modeling (SEM), mainly lavaan::lavaan() wrappers, lavaan::sem() lavaan::cfa(). package implementing advanced statistical procedures. job excellent packages semTools. helper functions tasks come handy (least ) SEM. usually used data analysis phase, publishing presenting results. Many tasks can done base R code dplyr functions. However, functions may help users familiar R programming use R occasionally tasks without writing code, people like know using base R want write code every time. intentionally use base R possible want keep semhelpinghands light weight package, depending packages possible, need worry deprecated functions updates packages break things, defeating “time saving” purpose package.","code":""},{"path":"https://sfcheung.github.io/semhelpinghands/index.html","id":"home-page","dir":"","previous_headings":"","what":"Home Page","title":"Helper Functions for Structural Equation Modeling","text":"package can found GitHub page package: https://sfcheung.github.io/semhelpinghands/","code":""},{"path":"https://sfcheung.github.io/semhelpinghands/index.html","id":"installation","dir":"","previous_headings":"","what":"Installation","title":"Helper Functions for Structural Equation Modeling","text":"latest version CRAN can installed install.packages(): latest developmental version GitHub can installed remotes::install_github():","code":"install.packages(\"semhelpinghands\") remotes::install_github(\"sfcheung/semhelpinghands\")"},{"path":"https://sfcheung.github.io/semhelpinghands/index.html","id":"motive","dir":"","previous_headings":"","what":"Motive","title":"Helper Functions for Structural Equation Modeling","text":"One major motive behind functions writing something work others. , function least useful use . Nevertheless, maybe others , like , just want simple functions simple tasks. also like using packages pack functions used work, source files . Therefore, packaged semhelpinghands also . hope package also useful others. devote limited amount time package. package functions means research. goals .","code":""},{"path":"https://sfcheung.github.io/semhelpinghands/index.html","id":"acknowledgement","dir":"","previous_headings":"","what":"Acknowledgement","title":"Helper Functions for Structural Equation Modeling","text":"like thank Prof. Rosseel Prof. Jorgensen developing lavaan semTools. advice lavaan Google Group GitHub pages (lavaan semTools) various issues lavaan helped writing functions , packed semhelpinghands. people inspired functions forgot acknowledge, please let know.","code":""},{"path":"https://sfcheung.github.io/semhelpinghands/index.html","id":"suggestions-and-bugs","dir":"","previous_headings":"","what":"Suggestions and Bugs","title":"Helper Functions for Structural Equation Modeling","text":"package still development. bugs, limitations. Comments suggestions welcomed. Feel free add issue GitHub. Although may able address package intended collection simple functions simple tasks, designed easy maintain, try can .","code":""},{"path":"https://sfcheung.github.io/semhelpinghands/reference/add_sig.html","id":null,"dir":"Reference","previous_headings":"","what":"Add Significant Test Results — add_sig","title":"Add Significant Test Results — add_sig","text":"inserts columns denote whether parameter significant.","code":""},{"path":"https://sfcheung.github.io/semhelpinghands/reference/add_sig.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Add Significant Test Results — add_sig","text":"","code":"add_sig(object, ..., standardized = FALSE, na_str = \"\", use = \"pvalue\")"},{"path":"https://sfcheung.github.io/semhelpinghands/reference/add_sig.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Add Significant Test Results — add_sig","text":"object lavaan object output lavaan::parameterEstimates() lavaan::standardizedSolution(). May also work est_table-class object returned functions like group_by_dvs() guarantee. ... Optional arguments passed lavaan::parameterEstimates() lavaan::standardizedSolution(). standardized Whether standardized solution needed. TRUE, lavaan::standardizedSolution() called. FALSE, default, lavaan::parameterEstimates() called. Ignored table estimates supplied. na_str string used parameters significant tests. example, fixed parameters. Default \"\". use character vector one strings. \"pvalue\" vector, p-values used. \"ci\" vector, confidence intervals appeared ci.lower ci.upper used. \"boot.ci\" vector columns boot.ci.lower boot.ci.upper available, columns used. Note ci.lower ci.upper can also bootstrap confidence intervals tables se = \"boot\" used.","code":""},{"path":"https://sfcheung.github.io/semhelpinghands/reference/add_sig.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Add Significant Test Results — add_sig","text":"output lavaan::parameterEstimates() lavaan::standardizedSolution(), one two columns inserted parameter estimates denote significant test results.","code":""},{"path":"https://sfcheung.github.io/semhelpinghands/reference/add_sig.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Add Significant Test Results — add_sig","text":"function calls lavaan::parameterEstimates() lavaan::standardizedSolution() checks columns pvalue, ci.lower ci.upper, /boot.ci.lower boot.ci.upper inserts columns denote parameter estimate whether significant based requested criteria.","code":""},{"path":[]},{"path":"https://sfcheung.github.io/semhelpinghands/reference/add_sig.html","id":"author","dir":"Reference","previous_headings":"","what":"Author","title":"Add Significant Test Results — add_sig","text":"Shu Fai Cheung https://orcid.org/0000-0002-9871-9448","code":""},{"path":"https://sfcheung.github.io/semhelpinghands/reference/add_sig.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Add Significant Test Results — add_sig","text":"","code":"library(lavaan) #> This is lavaan 0.6-16 #> lavaan is FREE software! Please report any bugs. set.seed(5478374) n <- 50 x <- runif(n) - .5 m <- .40 * x + rnorm(n, 0, sqrt(1 - .40)) y <- .30 * m + rnorm(n, 0, sqrt(1 - .30)) dat <- data.frame(x = x, y = y, m = m) model <- ' m ~ a*x y ~ b*m ab := a*b ' fit <- sem(model, data = dat, fixed.x = FALSE)  # Add \"*\" based on 'pvalue' add_sig(fit) #>   lhs op rhs label   est sig    se     z pvalue ci.lower ci.upper #> 1   m  ~   x     a 0.569     0.343 1.660  0.097   -0.103    1.240 #> 2   y  ~   m     b 0.219     0.153 1.430  0.153   -0.081    0.519 #> 3   m ~~   m       0.460 *** 0.092 5.000  0.000    0.280    0.641 #> 4   y ~~   y       0.570 *** 0.114 5.000  0.000    0.347    0.794 #> 5   x ~~   x       0.078 *** 0.016 5.000  0.000    0.048    0.109 #> 6  ab := a*b    ab 0.125     0.115 1.083  0.279   -0.101    0.350  # Add \"*\" for standardized solution add_sig(fit, standardized = TRUE) #>   lhs op rhs label est.std sig    se      z pvalue ci.lower ci.upper #> 1   m  ~   x     a   0.229     0.134  1.706  0.088   -0.034    0.491 #> 2   y  ~   m     b   0.198     0.136  1.459  0.145   -0.068    0.464 #> 3   m ~~   m         0.948 *** 0.061 15.466  0.000    0.828    1.068 #> 4   y ~~   y         0.961 *** 0.054 17.840  0.000    0.855    1.066 #> 5   x ~~   x         1.000     0.000     NA     NA    1.000    1.000 #> 6  ab := a*b    ab   0.045     0.041  1.096  0.273   -0.036    0.126  # Add \"*\" based on confidence interval add_sig(fit, use = \"ci\") #>   lhs op rhs label   est  ci    se     z pvalue ci.lower ci.upper #> 1   m  ~   x     a 0.569     0.343 1.660  0.097   -0.103    1.240 #> 2   y  ~   m     b 0.219     0.153 1.430  0.153   -0.081    0.519 #> 3   m ~~   m       0.460 Sig 0.092 5.000  0.000    0.280    0.641 #> 4   y ~~   y       0.570 Sig 0.114 5.000  0.000    0.347    0.794 #> 5   x ~~   x       0.078 Sig 0.016 5.000  0.000    0.048    0.109 #> 6  ab := a*b    ab 0.125     0.115 1.083  0.279   -0.101    0.350  # Add \"*\" for standardized solution based on confidence interval add_sig(fit, standardized = TRUE, use = \"ci\") #>   lhs op rhs label est.std  ci    se      z pvalue ci.lower ci.upper #> 1   m  ~   x     a   0.229     0.134  1.706  0.088   -0.034    0.491 #> 2   y  ~   m     b   0.198     0.136  1.459  0.145   -0.068    0.464 #> 3   m ~~   m         0.948 Sig 0.061 15.466  0.000    0.828    1.068 #> 4   y ~~   y         0.961 Sig 0.054 17.840  0.000    0.855    1.066 #> 5   x ~~   x         1.000     0.000     NA     NA    1.000    1.000 #> 6  ab := a*b    ab   0.045     0.041  1.096  0.273   -0.036    0.126  # Add \"*\" for standardized solution based on confidence interval # and 'pvalue'. add_sig(fit, standardized = TRUE, use = c(\"ci\", \"pvalue\")) #>   lhs op rhs label est.std sig  ci    se      z pvalue ci.lower ci.upper #> 1   m  ~   x     a   0.229         0.134  1.706  0.088   -0.034    0.491 #> 2   y  ~   m     b   0.198         0.136  1.459  0.145   -0.068    0.464 #> 3   m ~~   m         0.948 *** Sig 0.061 15.466  0.000    0.828    1.068 #> 4   y ~~   y         0.961 *** Sig 0.054 17.840  0.000    0.855    1.066 #> 5   x ~~   x         1.000         0.000     NA     NA    1.000    1.000 #> 6  ab := a*b    ab   0.045         0.041  1.096  0.273   -0.036    0.126  # Can also accept a parameter estimates table est <- parameterEstimates(fit) add_sig(est) #>   lhs op rhs label   est sig    se     z pvalue ci.lower ci.upper #> 1   m  ~   x     a 0.569     0.343 1.660  0.097   -0.103    1.240 #> 2   y  ~   m     b 0.219     0.153 1.430  0.153   -0.081    0.519 #> 3   m ~~   m       0.460 *** 0.092 5.000  0.000    0.280    0.641 #> 4   y ~~   y       0.570 *** 0.114 5.000  0.000    0.347    0.794 #> 5   x ~~   x       0.078 *** 0.016 5.000  0.000    0.048    0.109 #> 6  ab := a*b    ab 0.125     0.115 1.083  0.279   -0.101    0.350  # So it can be used with some other functions in semhelpinghands add_sig(filter_by(est, op = \"~\")) #>   lhs op rhs label   est sig    se    z pvalue ci.lower ci.upper #> 1   m  ~   x     a 0.569     0.343 1.66  0.097   -0.103    1.240 #> 2   y  ~   m     b 0.219     0.153 1.43  0.153   -0.081    0.519  # Piping can also be used est |> filter_by(op = \"~\") |>        add_sig() #>   lhs op rhs label   est sig    se    z pvalue ci.lower ci.upper #> 1   m  ~   x     a 0.569     0.343 1.66  0.097   -0.103    1.240 #> 2   y  ~   m     b 0.219     0.153 1.43  0.153   -0.081    0.519"},{"path":"https://sfcheung.github.io/semhelpinghands/reference/annotate_matrices.html","id":null,"dir":"Reference","previous_headings":"","what":"Annotate the Matrices of a\n'lavaan' Model — annotate_matrices","title":"Annotate the Matrices of a\n'lavaan' Model — annotate_matrices","text":"Label elements model matrices lavaan model.","code":""},{"path":"https://sfcheung.github.io/semhelpinghands/reference/annotate_matrices.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Annotate the Matrices of a\n'lavaan' Model — annotate_matrices","text":"","code":"annotate_matrices(fit)  # S3 method for annotate_matrices print(x, ...)"},{"path":"https://sfcheung.github.io/semhelpinghands/reference/annotate_matrices.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Annotate the Matrices of a\n'lavaan' Model — annotate_matrices","text":"fit output lavaan::lavaan() wrappers, lavaan::cfa() lavaan::sem(). x 'annotate_matrices'-class object. output annotate_matrices(). ... Optional arguments. passed default print method.","code":""},{"path":"https://sfcheung.github.io/semhelpinghands/reference/annotate_matrices.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Annotate the Matrices of a\n'lavaan' Model — annotate_matrices","text":"annotate_matrices() returns annotate_matrices-class object, list model matrices, elements annotated: parameter free, represented \"lhs-op-rhs\" according parameter estimate data frame. parameter fixed appears parameter table, represented \"(lhs-op-rhs = x)\" , x value fixed . parameter fixed zero parameter table, represented 0. print-method return input, x. called side-effect.","code":""},{"path":"https://sfcheung.github.io/semhelpinghands/reference/annotate_matrices.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Annotate the Matrices of a\n'lavaan' Model — annotate_matrices","text":"function annotates model matrices lavaan object. function used analysis. learning tool, learners understand relation model matrices model parameters. currently supports single-level single-group model .","code":""},{"path":"https://sfcheung.github.io/semhelpinghands/reference/annotate_matrices.html","id":"methods-by-generic-","dir":"Reference","previous_headings":"","what":"Methods (by generic)","title":"Annotate the Matrices of a\n'lavaan' Model — annotate_matrices","text":"print(annotate_matrices): print method output annotate_matrices()","code":""},{"path":"https://sfcheung.github.io/semhelpinghands/reference/annotate_matrices.html","id":"author","dir":"Reference","previous_headings":"","what":"Author","title":"Annotate the Matrices of a\n'lavaan' Model — annotate_matrices","text":"Shu Fai Cheung https://orcid.org/0000-0002-9871-9448","code":""},{"path":"https://sfcheung.github.io/semhelpinghands/reference/annotate_matrices.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Annotate the Matrices of a\n'lavaan' Model — annotate_matrices","text":"","code":"# Adapted from https://lavaan.ugent.be/tutorial/cfa.html  library(lavaan) HS.model <- ' visual  =~ x1 + x2 + x3 textual =~ x4 + x5 + x6 speed   =~ x7 + x8 + x9 ' fit_cfa <- cfa(HS.model,                data = HolzingerSwineford1939) annotate_matrices(fit_cfa) #> $lambda #>              visual           textual           speed #> x1 (visual=~x1 = 1)                 0               0 #> x2       visual=~x2                 0               0 #> x3       visual=~x3                 0               0 #> x4                0 (textual=~x4 = 1)               0 #> x5                0       textual=~x5               0 #> x6                0       textual=~x6               0 #> x7                0                 0 (speed=~x7 = 1) #> x8                0                 0       speed=~x8 #> x9                0                 0       speed=~x9 #>  #> $theta #>        x1     x2     x3     x4     x5     x6     x7     x8     x9 #> x1 x1~~x1      0      0      0      0      0      0      0      0 #> x2      0 x2~~x2      0      0      0      0      0      0      0 #> x3      0      0 x3~~x3      0      0      0      0      0      0 #> x4      0      0      0 x4~~x4      0      0      0      0      0 #> x5      0      0      0      0 x5~~x5      0      0      0      0 #> x6      0      0      0      0      0 x6~~x6      0      0      0 #> x7      0      0      0      0      0      0 x7~~x7      0      0 #> x8      0      0      0      0      0      0      0 x8~~x8      0 #> x9      0      0      0      0      0      0      0      0 x9~~x9 #>  #> $psi #>                  visual          textual          speed #> visual   visual~~visual  visual~~textual  visual~~speed #> textual visual~~textual textual~~textual textual~~speed #> speed     visual~~speed   textual~~speed   speed~~speed #>"},{"path":"https://sfcheung.github.io/semhelpinghands/reference/auto_cov.html","id":null,"dir":"Reference","previous_headings":"","what":"Add Covariances Between\nExogenous Variables — add_exo_cov","title":"Add Covariances Between\nExogenous Variables — add_exo_cov","text":"generates 'lavaan' model syntax exogenous variables lavaan model.","code":""},{"path":"https://sfcheung.github.io/semhelpinghands/reference/auto_cov.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Add Covariances Between\nExogenous Variables — add_exo_cov","text":"","code":"add_exo_cov(model, FUN = \"sem\", print = TRUE)  auto_exo_cov(model, FUN = \"sem\", print = TRUE)"},{"path":"https://sfcheung.github.io/semhelpinghands/reference/auto_cov.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Add Covariances Between\nExogenous Variables — add_exo_cov","text":"model model syntax covariances added. FUN Name (string) lavaan wrapper called. Normally \"sem\", default. print Logical. Whether generated syntax also printed cat(). Default TRUE.","code":""},{"path":"https://sfcheung.github.io/semhelpinghands/reference/auto_cov.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Add Covariances Between\nExogenous Variables — add_exo_cov","text":"add_exo_cov() returns one-element character vector syntax, lines separated \"\\n\". generated syntax appended input model syntax. auto_exo_cov() returns one-element character vector generated syntax, lines separated \"\\n\".","code":""},{"path":"https://sfcheung.github.io/semhelpinghands/reference/auto_cov.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Add Covariances Between\nExogenous Variables — add_exo_cov","text":"function lavaan::sem() usually set covariances \"exogenous\" variables free fixed.x = FALSE (\"exogenous\" defined variables appear right hand side left hand side ~ operator`). However, covariance residual term endogenous variable exogenous variable manually set free, lavaan::sem() may set aforementioned covariances free. Users need free manually, may lot models. function gets model syntax generates syntax covariances. Users can inspect , modify necessary, copy paste model syntax.","code":""},{"path":"https://sfcheung.github.io/semhelpinghands/reference/auto_cov.html","id":"functions","dir":"Reference","previous_headings":"","what":"Functions","title":"Add Covariances Between\nExogenous Variables — add_exo_cov","text":"add_exo_cov(): Add covariances exogenous variables model syntax return modified model syntax. auto_exo_cov(): Generate model syntax covariances exogenous variables.","code":""},{"path":"https://sfcheung.github.io/semhelpinghands/reference/auto_cov.html","id":"author","dir":"Reference","previous_headings":"","what":"Author","title":"Add Covariances Between\nExogenous Variables — add_exo_cov","text":"Shu Fai Cheung https://orcid.org/0000-0002-9871-9448","code":""},{"path":"https://sfcheung.github.io/semhelpinghands/reference/auto_cov.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Add Covariances Between\nExogenous Variables — add_exo_cov","text":"","code":"library(lavaan) set.seed(8976223) n <- 100 x <- rnorm(n) m <- .5 * x + rnorm(n, 0, sqrt(.4)) z <- rnorm(n) y <- .4 * m + .3 * z * m + rnorm(n, 0, .5) dat <- data.frame(x, m, z, y) dat$zm <- dat$z * dat$m mod0 <- \" m ~ x y ~ m + z + zm m ~~ z + zm \" fit <- sem(mod0, dat, fixed.x = FALSE)  # Add covariances. Also printed by default. mod0_cov <- add_exo_cov(mod0) #>  #> m ~ x #> y ~ m + z + zm #> m ~~ z + zm #>  #> # Added by auto_exo_cov #> x ~~ z + zm #> z ~~ zm  # Fit the model fit_cov <- sem(mod0_cov, dat, fixed.x = FALSE)  # Manually adding the covariances mod1 <- \" m ~ x y ~ m + z + zm m ~~ z + zm z  ~~ zm + x zm ~~ x \" fit1 <- sem(mod1, dat, meanstructure = TRUE, fixed.x = FALSE)  # Compare the results  # No manual covariances fit #> lavaan 0.6.16 ended normally after 15 iterations #>  #>   Estimator                                         ML #>   Optimization method                           NLMINB #>   Number of model parameters                        11 #>  #>   Number of observations                           100 #>  #> Model Test User Model: #>                                                        #>   Test statistic                                 5.863 #>   Degrees of freedom                                 4 #>   P-value (Chi-square)                           0.210  # Automatically generated covariances fit_cov #> lavaan 0.6.16 ended normally after 23 iterations #>  #>   Estimator                                         ML #>   Optimization method                           NLMINB #>   Number of model parameters                        14 #>  #>   Number of observations                           100 #>  #> Model Test User Model: #>                                                        #>   Test statistic                                 0.152 #>   Degrees of freedom                                 1 #>   P-value (Chi-square)                           0.696  # Manually added covariances fit1 #> lavaan 0.6.16 ended normally after 23 iterations #>  #>   Estimator                                         ML #>   Optimization method                           NLMINB #>   Number of model parameters                        19 #>  #>   Number of observations                           100 #>  #> Model Test User Model: #>                                                        #>   Test statistic                                 0.152 #>   Degrees of freedom                                 1 #>   P-value (Chi-square)                           0.696"},{"path":"https://sfcheung.github.io/semhelpinghands/reference/compare_estimators.html","id":null,"dir":"Reference","previous_headings":"","what":"Refit a 'lavaan'-Model by\nSeveral Estimators — compare_estimators","title":"Refit a 'lavaan'-Model by\nSeveral Estimators — compare_estimators","text":"Refit model 'lavaan' several lavaan-supported estimators","code":""},{"path":"https://sfcheung.github.io/semhelpinghands/reference/compare_estimators.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Refit a 'lavaan'-Model by\nSeveral Estimators — compare_estimators","text":"","code":"compare_estimators(object, estimators = NULL)  se_ratios(fit_list, reference = NULL)"},{"path":"https://sfcheung.github.io/semhelpinghands/reference/compare_estimators.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Refit a 'lavaan'-Model by\nSeveral Estimators — compare_estimators","text":"object lavaan object. estimators character vector estimator supported estimator argument lavaan::lavaan() wrappers, lavaan::sem() lavaan::cfa(). fit_list output compare_estimators(). reference name reference method (ratios equal one). Must one estimator used compare_estimators(). NULL, first estimator used.","code":""},{"path":"https://sfcheung.github.io/semhelpinghands/reference/compare_estimators.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Refit a 'lavaan'-Model by\nSeveral Estimators — compare_estimators","text":"list lavaan outputs, update original output using one estimators.","code":""},{"path":"https://sfcheung.github.io/semhelpinghands/reference/compare_estimators.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Refit a 'lavaan'-Model by\nSeveral Estimators — compare_estimators","text":"function simply uses lapply() update() rerun analysis estimator using update(object, estimator = \"x\", x estimator. results can compared using group_by_models().","code":""},{"path":"https://sfcheung.github.io/semhelpinghands/reference/compare_estimators.html","id":"functions","dir":"Reference","previous_headings":"","what":"Functions","title":"Refit a 'lavaan'-Model by\nSeveral Estimators — compare_estimators","text":"compare_estimators(): Refit model different estimators. se_ratios(): wrapper group_by_models() computes ratios standard errors different methods one method.","code":""},{"path":[]},{"path":"https://sfcheung.github.io/semhelpinghands/reference/compare_estimators.html","id":"author","dir":"Reference","previous_headings":"","what":"Author","title":"Refit a 'lavaan'-Model by\nSeveral Estimators — compare_estimators","text":"Shu Fai Cheung https://orcid.org/0000-0002-9871-9448.","code":""},{"path":"https://sfcheung.github.io/semhelpinghands/reference/compare_estimators.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Refit a 'lavaan'-Model by\nSeveral Estimators — compare_estimators","text":"","code":"library(lavaan) set.seed(5478374) n <- 50 x <- runif(n) - .5 m <- .40 * x + rnorm(n, 0, sqrt(1 - .40)) y <- .30 * m + rnorm(n, 0, sqrt(1 - .30)) dat <- data.frame(x = x, y = y, m = m) model <- ' m ~ a*x y ~ b*m ab := a*b '  fit <- sem(model, data = dat, fixed.x = FALSE)  # Refit the model by three different estimators fit_more <- compare_estimators(fit, estimator = c(\"GLS\", \"MLR\", \"ML\"))  # Use group_by_models to compare the estimates group_by_models(fit_more, col_names = c(\"est\", \"pvalue\")) #>   lhs op rhs est_GLS est_MLR est_ML pvalue_GLS pvalue_MLR pvalue_ML #> 1   m  ~   x   0.569   0.569  0.569      0.100      0.062     0.097 #> 2   y  ~   m   0.219   0.219  0.219      0.157      0.116     0.153 #> 3   m ~~   m   0.470   0.460  0.460      0.000      0.000     0.000 #> 4   x ~~   x   0.080   0.078  0.078      0.000      0.000     0.000 #> 5   y ~~   y   0.581   0.570  0.570      0.000      0.000     0.000 #> 6  ab := a*b   0.125   0.125  0.125      0.288      0.259     0.279  # Use se_ratios to compare standard errors se_ratios(fit_more, reference = \"ML\") #>   lhs op rhs se_GLS se_MLR se_ML ratio_GLS ratio_MLR ratio_ML #> 1   m  ~   x  0.346  0.305 0.343     1.011     0.889        1 #> 2   y  ~   m  0.155  0.139 0.153     1.010     0.909        1 #> 3   m ~~   m  0.095  0.089 0.092     1.031     0.966        1 #> 4   x ~~   x  0.016  0.011 0.016     1.030     0.719        1 #> 5   y ~~   y  0.118  0.111 0.114     1.030     0.973        1 #> 6  ab := a*b  0.117  0.110 0.115     1.020     0.960        1"},{"path":"https://sfcheung.github.io/semhelpinghands/reference/dvs_ivs.html","id":null,"dir":"Reference","previous_headings":"","what":"Sample Dataset: 3 Predictors and 3 Outcomes — dvs_ivs","title":"Sample Dataset: 3 Predictors and 3 Outcomes — dvs_ivs","text":"path model three predictors three outcomes, illustration.","code":""},{"path":"https://sfcheung.github.io/semhelpinghands/reference/dvs_ivs.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Sample Dataset: 3 Predictors and 3 Outcomes — dvs_ivs","text":"","code":"dvs_ivs"},{"path":"https://sfcheung.github.io/semhelpinghands/reference/dvs_ivs.html","id":"format","dir":"Reference","previous_headings":"","what":"Format","title":"Sample Dataset: 3 Predictors and 3 Outcomes — dvs_ivs","text":"data frame 100 rows 7 variables: y1 Outcome variable 1. Numeric. y2 Outcome variable 2. Numeric. y3 Outcome variable 3. Numeric. x1 Predictor 1. Numeric. x2 Predictor 2. Numeric. x3 Predictor 3. Numeric. gp Group variable: \"gp1\" \"gp2\". String.","code":""},{"path":"https://sfcheung.github.io/semhelpinghands/reference/dvs_ivs.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Sample Dataset: 3 Predictors and 3 Outcomes — dvs_ivs","text":"","code":"data(dvs_ivs) library(lavaan) mod <- \" y1 ~ x1 + x2 + x3 y2 ~ x1 + x3 y3 ~ y2 + x2 \" fit <- sem(mod, dvs_ivs) parameterEstimates(fit) #>    lhs op rhs    est    se      z pvalue ci.lower ci.upper #> 1   y1  ~  x1  0.206 0.087  2.354  0.019    0.034    0.377 #> 2   y1  ~  x2  0.381 0.093  4.100  0.000    0.199    0.563 #> 3   y1  ~  x3  0.162 0.088  1.852  0.064   -0.009    0.334 #> 4   y2  ~  x1  0.149 0.105  1.425  0.154   -0.056    0.354 #> 5   y2  ~  x3  0.230 0.105  2.187  0.029    0.024    0.437 #> 6   y3  ~  y2  0.044 0.106  0.420  0.675   -0.163    0.251 #> 7   y3  ~  x2  0.295 0.121  2.445  0.014    0.059    0.532 #> 8   y1 ~~  y1  0.695 0.098  7.071  0.000    0.502    0.888 #> 9   y2 ~~  y2  1.013 0.143  7.071  0.000    0.732    1.294 #> 10  y3 ~~  y3  1.206 0.171  7.071  0.000    0.872    1.540 #> 11  y1 ~~  y3 -0.027 0.092 -0.292  0.770   -0.206    0.153 #> 12  x1 ~~  x1  0.926 0.000     NA     NA    0.926    0.926 #> 13  x1 ~~  x2  0.118 0.000     NA     NA    0.118    0.118 #> 14  x1 ~~  x3  0.000 0.000     NA     NA    0.000    0.000 #> 15  x2 ~~  x2  0.828 0.000     NA     NA    0.828    0.828 #> 16  x2 ~~  x3  0.073 0.000     NA     NA    0.073    0.073 #> 17  x3 ~~  x3  0.912 0.000     NA     NA    0.912    0.912 fit_gp <- sem(mod, dvs_ivs, group = \"gp\") parameterEstimates(fit_gp) #>    lhs op rhs block group    est    se      z pvalue ci.lower ci.upper #> 1   y1  ~  x1     1     1  0.210 0.149  1.404  0.160   -0.083    0.502 #> 2   y1  ~  x2     1     1  0.243 0.138  1.761  0.078   -0.027    0.513 #> 3   y1  ~  x3     1     1  0.246 0.144  1.710  0.087   -0.036    0.527 #> 4   y2  ~  x1     1     1  0.036 0.179  0.199  0.842   -0.315    0.386 #> 5   y2  ~  x3     1     1  0.217 0.176  1.232  0.218   -0.128    0.561 #> 6   y3  ~  y2     1     1  0.096 0.120  0.802  0.423   -0.139    0.332 #> 7   y3  ~  x2     1     1  0.372 0.135  2.754  0.006    0.107    0.637 #> 8   y1 ~~  y1     1     1  0.754 0.157  4.796  0.000    0.446    1.062 #> 9   y2 ~~  y2     1     1  1.148 0.239  4.796  0.000    0.679    1.617 #> 10  y3 ~~  y3     1     1  0.787 0.164  4.796  0.000    0.466    1.109 #> 11  y1 ~~  y3     1     1  0.010 0.114  0.085  0.932   -0.213    0.232 #> 12  x1 ~~  x1     1     1  0.798 0.000     NA     NA    0.798    0.798 #> 13  x1 ~~  x2     1     1  0.223 0.000     NA     NA    0.223    0.223 #> 14  x1 ~~  x3     1     1  0.121 0.000     NA     NA    0.121    0.121 #> 15  x2 ~~  x2     1     1  0.938 0.000     NA     NA    0.938    0.938 #> 16  x2 ~~  x3     1     1  0.139 0.000     NA     NA    0.139    0.139 #> 17  x3 ~~  x3     1     1  0.825 0.000     NA     NA    0.825    0.825 #> 18  y1 ~1         1     1 -0.295 0.137 -2.148  0.032   -0.564   -0.026 #> 19  y2 ~1         1     1  0.027 0.168  0.163  0.870   -0.302    0.357 #> 20  y3 ~1         1     1  0.233 0.131  1.775  0.076   -0.024    0.490 #> 21  x1 ~1         1     1  0.282 0.000     NA     NA    0.282    0.282 #> 22  x2 ~1         1     1 -0.067 0.000     NA     NA   -0.067   -0.067 #> 23  x3 ~1         1     1 -0.123 0.000     NA     NA   -0.123   -0.123 #> 24  y1  ~  x1     2     2  0.258 0.102  2.530  0.011    0.058    0.458 #> 25  y1  ~  x2     2     2  0.484 0.121  3.998  0.000    0.247    0.721 #> 26  y1  ~  x3     2     2  0.121 0.104  1.165  0.244   -0.082    0.324 #> 27  y2  ~  x1     2     2  0.226 0.127  1.774  0.076   -0.024    0.475 #> 28  y2  ~  x3     2     2  0.261 0.129  2.016  0.044    0.007    0.514 #> 29  y3  ~  y2     2     2 -0.003 0.162 -0.020  0.984   -0.322    0.315 #> 30  y3  ~  x2     2     2  0.291 0.190  1.527  0.127   -0.082    0.664 #> 31  y1 ~~  y1     2     2  0.568 0.109  5.196  0.000    0.354    0.783 #> 32  y2 ~~  y2     2     2  0.882 0.170  5.196  0.000    0.549    1.214 #> 33  y3 ~~  y3     2     2  1.412 0.272  5.196  0.000    0.880    1.945 #> 34  y1 ~~  y3     2     2  0.050 0.122  0.410  0.682   -0.189    0.289 #> 35  x1 ~~  x1     2     2  1.020 0.000     NA     NA    1.020    1.020 #> 36  x1 ~~  x2     2     2  0.042 0.000     NA     NA    0.042    0.042 #> 37  x1 ~~  x3     2     2 -0.099 0.000     NA     NA   -0.099   -0.099 #> 38  x2 ~~  x2     2     2  0.722 0.000     NA     NA    0.722    0.722 #> 39  x2 ~~  x3     2     2  0.013 0.000     NA     NA    0.013    0.013 #> 40  x3 ~~  x3     2     2  0.985 0.000     NA     NA    0.985    0.985 #> 41  y1 ~1         2     2  0.007 0.104  0.068  0.946   -0.196    0.211 #> 42  y2 ~1         2     2 -0.050 0.129 -0.392  0.695   -0.303    0.202 #> 43  y3 ~1         2     2 -0.333 0.163 -2.042  0.041   -0.652   -0.013 #> 44  x1 ~1         2     2  0.101 0.000     NA     NA    0.101    0.101 #> 45  x2 ~1         2     2  0.092 0.000     NA     NA    0.092    0.092 #> 46  x3 ~1         2     2 -0.065 0.000     NA     NA   -0.065   -0.065"},{"path":"https://sfcheung.github.io/semhelpinghands/reference/filter_by.html","id":null,"dir":"Reference","previous_headings":"","what":"Filter a Parameter Estimates\nTable — filter_by","title":"Filter a Parameter Estimates\nTable — filter_by","text":"Filter parameter estimates table similar tables inlavaan common fields op (operator).","code":""},{"path":"https://sfcheung.github.io/semhelpinghands/reference/filter_by.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Filter a Parameter Estimates\nTable — filter_by","text":"","code":"filter_by(object, op = NULL, lhs = NULL, rhs = NULL, group = NULL, fit = NULL)"},{"path":"https://sfcheung.github.io/semhelpinghands/reference/filter_by.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Filter a Parameter Estimates\nTable — filter_by","text":"object output lavaan::parameterEstimates(), lavaan::standardizedSolution(), lavaan.data.frame object. May also work est_table-class object returned functions like group_by_dvs() guarantee. op character vector operators (op) filtering. Common operators \"~\", \"~~\", \"=~\", \":=\", \"~1\". lhs character vector names lhs column. rhs character vector names rhs column. group vector either group numbers group column labels groups. labels supplied, original fit object must supplied extracting group labels. fit original fit object. Usd group vector group labels.","code":""},{"path":"https://sfcheung.github.io/semhelpinghands/reference/filter_by.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Filter a Parameter Estimates\nTable — filter_by","text":"filtered version input object.","code":""},{"path":"https://sfcheung.github.io/semhelpinghands/reference/filter_by.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Filter a Parameter Estimates\nTable — filter_by","text":"functions accepts output lavaan::parameterEstimates() lavaan::standardizedSolution() filter rows commonly used field.","code":""},{"path":"https://sfcheung.github.io/semhelpinghands/reference/filter_by.html","id":"author","dir":"Reference","previous_headings":"","what":"Author","title":"Filter a Parameter Estimates\nTable — filter_by","text":"Shu Fai Cheung https://orcid.org/0000-0002-9871-9448","code":""},{"path":"https://sfcheung.github.io/semhelpinghands/reference/filter_by.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Filter a Parameter Estimates\nTable — filter_by","text":"","code":"library(lavaan) set.seed(5478374) n <- 50 x <- runif(n) - .5 m <- .40 * x + rnorm(n, 0, sqrt(1 - .40)) y <- .30 * m + rnorm(n, 0, sqrt(1 - .30)) dat <- data.frame(x = x, y = y, m = m) model <- ' m ~ a*x y ~ b*m ab := a*b ' fit <- sem(model, data = dat, fixed.x = FALSE)  model_gp <- ' m ~ c(a1, a2)*x y ~ c(b1, b2)*m a1b1 := a1*b1 a2b2 := a2*b2 ' dat$gp <- sample(c(\"gp1\", \"gp2\"), n, replace = TRUE) fit_gp <- sem(model_gp, dat, group = \"gp\", warn = FALSE)  est <- parameterEstimates(fit) est_gp <- parameterEstimates(fit_gp)  filter_by(est, op = \"~\") #>   lhs op rhs label   est    se    z pvalue ci.lower ci.upper #> 1   m  ~   x     a 0.569 0.343 1.66  0.097   -0.103    1.240 #> 2   y  ~   m     b 0.219 0.153 1.43  0.153   -0.081    0.519  filter_by(est, op = \"~\", lhs = \"y\") #>   lhs op rhs label   est    se    z pvalue ci.lower ci.upper #> 2   y  ~   m     b 0.219 0.153 1.43  0.153   -0.081    0.519  filter_by(est, rhs = c(\"m\", \"x\"), op = \"~\") #>   lhs op rhs label   est    se    z pvalue ci.lower ci.upper #> 1   m  ~   x     a 0.569 0.343 1.66  0.097   -0.103    1.240 #> 2   y  ~   m     b 0.219 0.153 1.43  0.153   -0.081    0.519  filter_by(est_gp, group = 2) #>    lhs op rhs block group label    est    se      z pvalue ci.lower ci.upper #> 9    m  ~   x     2     2    a2  0.574 0.417  1.375  0.169   -0.244    1.391 #> 10   y  ~   m     2     2    b2  0.206 0.231  0.892  0.372   -0.246    0.658 #> 11   m ~~   m     2     2        0.389 0.104  3.742  0.000    0.185    0.593 #> 12   y ~~   y     2     2        0.619 0.166  3.742  0.000    0.295    0.944 #> 13   x ~~   x     2     2        0.080 0.000     NA     NA    0.080    0.080 #> 14   m ~1         2     2       -0.144 0.119 -1.206  0.228   -0.377    0.090 #> 15   y ~1         2     2       -0.297 0.154 -1.933  0.053   -0.598    0.004 #> 16   x ~1         2     2       -0.042 0.000     NA     NA   -0.042   -0.042  # If the fit object is supplied, can filter # by group label filter_by(est_gp, group = \"gp2\", fit = fit_gp) #>   lhs op rhs block group label    est    se      z pvalue ci.lower ci.upper #> 1   m  ~   x     1     1    a1  0.526 0.569  0.925  0.355   -0.589    1.640 #> 2   y  ~   m     1     1    b1  0.211 0.201  1.050  0.294   -0.183    0.605 #> 3   m ~~   m     1     1        0.540 0.163  3.317  0.001    0.221    0.859 #> 4   y ~~   y     1     1        0.499 0.150  3.317  0.001    0.204    0.793 #> 5   x ~~   x     1     1        0.076 0.000     NA     NA    0.076    0.076 #> 6   m ~1         1     1       -0.004 0.157 -0.024  0.981   -0.311    0.303 #> 7   y ~1         1     1       -0.168 0.151 -1.113  0.266   -0.463    0.128 #> 8   x ~1         1     1       -0.007 0.000     NA     NA   -0.007   -0.007 filter_by(est_gp, group = \"gp2\", fit = fit_gp, op = \"~\") #>   lhs op rhs block group label   est    se     z pvalue ci.lower ci.upper #> 1   m  ~   x     1     1    a1 0.526 0.569 0.925  0.355   -0.589    1.640 #> 2   y  ~   m     1     1    b1 0.211 0.201 1.050  0.294   -0.183    0.605  # Select user-defined parameters filter_by(est_gp, op = \":=\") #>     lhs op   rhs block group label   est    se     z pvalue ci.lower ci.upper #> 17 a1b1 := a1*b1     0     0  a1b1 0.111 0.160 0.694  0.488   -0.203    0.425 #> 18 a2b2 := a2*b2     0     0  a2b2 0.118 0.158 0.748  0.454   -0.191    0.427  # Can be used with some other functions in semhelpinghands # Piping can also be used est_gp |> filter_by(op = \"~\", group = \"gp2\", fit = fit_gp) |>           add_sig() #>   lhs op rhs block group label   est sig    se     z pvalue ci.lower ci.upper #> 1   m  ~   x     1     1    a1 0.526     0.569 0.925  0.355   -0.589    1.640 #> 2   y  ~   m     1     1    b1 0.211     0.201 1.050  0.294   -0.183    0.605"},{"path":"https://sfcheung.github.io/semhelpinghands/reference/group_by_groups.html","id":null,"dir":"Reference","previous_headings":"","what":"Group Estimates By Groups — group_by_groups","title":"Group Estimates By Groups — group_by_groups","text":"Groups parameter estimates information p-values table groups columns parameters rows.","code":""},{"path":"https://sfcheung.github.io/semhelpinghands/reference/group_by_groups.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Group Estimates By Groups — group_by_groups","text":"","code":"group_by_groups(   object,   ...,   col_names = \"est\",   group_first = TRUE,   group_labels = NULL,   fit = NULL,   use_standardizedSolution = FALSE )"},{"path":"https://sfcheung.github.io/semhelpinghands/reference/group_by_groups.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Group Estimates By Groups — group_by_groups","text":"object lavaan object output lavaan::parameterEstimates() lavaan::standardizedSolution(). ... Optional arguments passed lavaan::parameterEstimates(). Ignored object output lavaan::parameterEstimates() lavaan::standardizedSolution(). col_names vector column names parameter estimate tables included. Default \"est\". group_first TRUE, columns grouped groups first columns parameter estimates tables. Default TRUE. group_labels character vector group labels. assigned group id = 1, 2, 3, etc. provided. try retrieved object lavaan::lavaan object. fit Optional. lavaan::lavaan object. object parameter estimates table group_labels NULL, try retrieve group labels fit supplied. use_standardizedSolution TRUE object estimates table, lavaan::standardizedSolution() used generate table. FALSE, default, lavaan::parameterEstimates() used necessary.","code":""},{"path":"https://sfcheung.github.io/semhelpinghands/reference/group_by_groups.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Group Estimates By Groups — group_by_groups","text":"data-frame-like object class est_table.","code":""},{"path":"https://sfcheung.github.io/semhelpinghands/reference/group_by_groups.html","id":"author","dir":"Reference","previous_headings":"","what":"Author","title":"Group Estimates By Groups — group_by_groups","text":"Shu Fai Cheung https://orcid.org/0000-0002-9871-9448","code":""},{"path":"https://sfcheung.github.io/semhelpinghands/reference/group_by_groups.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Group Estimates By Groups — group_by_groups","text":"","code":"library(lavaan) set.seed(5478374) n <- 100 x <- runif(n) - .5 m <- .40 * x + rnorm(n, 0, sqrt(1 - .40)) y <- .30 * m + rnorm(n, 0, sqrt(1 - .30)) city <- sample(c(\"City Alpha\", \"City Beta\"), 100,                replace = TRUE) dat <- data.frame(x = x, y = y, m = m, city = city) model <- ' m ~ c(a1, a2)*x y ~ c(b1, b2)*m a1b1 := a1*b1 a2b2 := a2*b2 ' fit <- sem(model, data = dat, fixed.x = FALSE,            group = \"city\") (est <- parameterEstimates(fit)) #>     lhs op   rhs block group label    est    se      z pvalue ci.lower ci.upper #> 1     m  ~     x     1     1    a1  0.636 0.454  1.401  0.161   -0.253    1.526 #> 2     y  ~     m     1     1    b1  0.469 0.153  3.055  0.002    0.168    0.769 #> 3     m ~~     m     1     1        0.530 0.107  4.950  0.000    0.320    0.740 #> 4     y ~~     y     1     1        0.636 0.128  4.950  0.000    0.384    0.887 #> 5     x ~~     x     1     1        0.052 0.011  4.950  0.000    0.032    0.073 #> 6     m ~1           1     1       -0.144 0.108 -1.335  0.182   -0.355    0.067 #> 7     y ~1           1     1       -0.092 0.117 -0.786  0.432   -0.322    0.138 #> 8     x ~1           1     1       -0.062 0.033 -1.882  0.060   -0.126    0.003 #> 9     m  ~     x     2     2    a2  0.418 0.271  1.540  0.124   -0.114    0.950 #> 10    y  ~     m     2     2    b2  0.277 0.147  1.880  0.060   -0.012    0.565 #> 11    m ~~     m     2     2        0.413 0.082  5.050  0.000    0.253    0.574 #> 12    y ~~     y     2     2        0.478 0.095  5.050  0.000    0.292    0.663 #> 13    x ~~     x     2     2        0.110 0.022  5.050  0.000    0.067    0.153 #> 14    m ~1           2     2       -0.179 0.091 -1.961  0.050   -0.357    0.000 #> 15    y ~1           2     2       -0.125 0.100 -1.253  0.210   -0.320    0.070 #> 16    x ~1           2     2        0.051 0.046  1.103  0.270   -0.040    0.142 #> 17 a1b1 := a1*b1     0     0  a1b1  0.298 0.234  1.274  0.203   -0.161    0.757 #> 18 a2b2 := a2*b2     0     0  a2b2  0.116 0.097  1.191  0.234   -0.075    0.306  # Group them by groups group_by_groups(fit) #>   lhs op rhs est_City.Beta est_City.Alpha #> 1   m  ~   x         0.636          0.418 #> 2   y  ~   m         0.469          0.277 #> 3   m ~~   m         0.530          0.413 #> 4   x ~~   x         0.052          0.110 #> 5   y ~~   y         0.636          0.478 #> 6   m ~1            -0.144         -0.179 #> 7   x ~1            -0.062          0.051 #> 8   y ~1            -0.092         -0.125  # Can also work on a parameter estimates table # To have group labels, need to supply the fit object group_by_groups(est, fit = fit) #>   lhs op rhs est_City.Beta est_City.Alpha #> 1   m  ~   x         0.636          0.418 #> 2   y  ~   m         0.469          0.277 #> 3   m ~~   m         0.530          0.413 #> 4   x ~~   x         0.052          0.110 #> 5   y ~~   y         0.636          0.478 #> 6   m ~1            -0.144         -0.179 #> 7   x ~1            -0.062          0.051 #> 8   y ~1            -0.092         -0.125  # Can be used with some other functions in semhelpinghands # when used on a parameter estimates table group_by_groups(filter_by(est, op = \"~\"), fit = fit) #>   lhs op rhs est_City.Beta est_City.Alpha #> 1   m  ~   x         0.636          0.418 #> 2   y  ~   m         0.469          0.277  # Also support piping est |> filter_by(op = \"~\") |>        group_by_groups(fit = fit) #>   lhs op rhs est_City.Beta est_City.Alpha #> 1   m  ~   x         0.636          0.418 #> 2   y  ~   m         0.469          0.277"},{"path":"https://sfcheung.github.io/semhelpinghands/reference/group_by_models.html","id":null,"dir":"Reference","previous_headings":"","what":"Group Estimates By Models — group_by_models","title":"Group Estimates By Models — group_by_models","text":"Groups parameter estimates information p-values table models columns.","code":""},{"path":"https://sfcheung.github.io/semhelpinghands/reference/group_by_models.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Group Estimates By Models — group_by_models","text":"","code":"group_by_models(   object_list,   ...,   col_names = \"est\",   group_first = FALSE,   model_first = TRUE,   use_standardizedSolution = FALSE )"},{"path":"https://sfcheung.github.io/semhelpinghands/reference/group_by_models.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Group Estimates By Models — group_by_models","text":"object_list named list lavaan objects, named list output lavaan::parameterEstimates(), named list output lavaan::standardizedSolution(). ... Optional arguments passed lavaan::parameterEstimates(). Ignored elements object_list results lavaan::parameterEstimates() lavaan::standardizedSolution(). col_names vector column names parameter estimate tables included. Default \"est\". group_first TRUE, rows grouped groups first parameters. Ignored model one group. Default FALSE. model_first TRUE, columns grouped models first columns parameter estimates tables. Default TRUE. use_standardizedSolution TRUE object_list list estimates tables, lavaan::standardizedSolution() used generate table. FALSE, default, lavaan::parameterEstimates() used necessary.","code":""},{"path":"https://sfcheung.github.io/semhelpinghands/reference/group_by_models.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Group Estimates By Models — group_by_models","text":"data-frame-like object class est_table.","code":""},{"path":"https://sfcheung.github.io/semhelpinghands/reference/group_by_models.html","id":"author","dir":"Reference","previous_headings":"","what":"Author","title":"Group Estimates By Models — group_by_models","text":"Shu Fai Cheung https://orcid.org/0000-0002-9871-9448 Inspired proposal Rönkkö posted GitHub https://github.com/simsem/semTools/issues/24#issue-235172313 semTools. want something simple quick overview wrote function.","code":""},{"path":"https://sfcheung.github.io/semhelpinghands/reference/group_by_models.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Group Estimates By Models — group_by_models","text":"","code":"library(lavaan) set.seed(5478374) n <- 50 x <- runif(n) - .5 m <- .40 * x + rnorm(n, 0, sqrt(1 - .40)) y <- .30 * m + rnorm(n, 0, sqrt(1 - .30)) dat <- data.frame(x = x, y = y, m = m) model1 <- ' m ~ a*x y ~ b*m ab := a*b ' fit1 <- sem(model1, data = dat, fixed.x = FALSE) model2 <- ' m ~ a*x y ~ b*m + x ab := a*b ' fit2 <- sem(model2, data = dat, fixed.x = FALSE) parameterEstimates(fit1) #>   lhs op rhs label   est    se     z pvalue ci.lower ci.upper #> 1   m  ~   x     a 0.569 0.343 1.660  0.097   -0.103    1.240 #> 2   y  ~   m     b 0.219 0.153 1.430  0.153   -0.081    0.519 #> 3   m ~~   m       0.460 0.092 5.000  0.000    0.280    0.641 #> 4   y ~~   y       0.570 0.114 5.000  0.000    0.347    0.794 #> 5   x ~~   x       0.078 0.016 5.000  0.000    0.048    0.109 #> 6  ab := a*b    ab 0.125 0.115 1.083  0.279   -0.101    0.350 parameterEstimates(fit2) #>   lhs op rhs label   est    se     z pvalue ci.lower ci.upper #> 1   m  ~   x     a 0.569 0.343 1.660  0.097   -0.103    1.240 #> 2   y  ~   m     b 0.214 0.157 1.360  0.174   -0.094    0.522 #> 3   y  ~   x       0.056 0.392 0.142  0.887   -0.712    0.823 #> 4   m ~~   m       0.460 0.092 5.000  0.000    0.280    0.641 #> 5   y ~~   y       0.570 0.114 5.000  0.000    0.347    0.793 #> 6   x ~~   x       0.078 0.016 5.000  0.000    0.048    0.109 #> 7  ab := a*b    ab 0.122 0.116 1.052  0.293   -0.105    0.348 group_by_models(list(no_direct = fit1,                      direct = fit2),                 col_names = c(\"est\", \"pvalue\")) #>   lhs op rhs est_no_direct est_direct pvalue_no_direct pvalue_direct #> 1   m  ~   x         0.569      0.569            0.097         0.097 #> 2   y  ~   m         0.219      0.214            0.153         0.174 #> 3   y  ~   x            NA      0.056               NA         0.887 #> 4   m ~~   m         0.460      0.460            0.000         0.000 #> 5   x ~~   x         0.078      0.078            0.000         0.000 #> 6   y ~~   y         0.570      0.570            0.000         0.000 #> 7  ab := a*b         0.125      0.122            0.279         0.293 # Can also be used with some other functions in # semhelpinghands group_by_models(list(no_direct = fit1,                      direct = fit2),                 col_names = c(\"est\", \"pvalue\")) |>                 filter_by(op = \"~\") #>   lhs op rhs est_no_direct est_direct pvalue_no_direct pvalue_direct #> 1   m  ~   x         0.569      0.569            0.097         0.097 #> 2   y  ~   m         0.219      0.214            0.153         0.174 #> 3   y  ~   x            NA      0.056               NA         0.887"},{"path":"https://sfcheung.github.io/semhelpinghands/reference/group_estimates.html","id":null,"dir":"Reference","previous_headings":"","what":"Group Estimates By Dependent\nor Independent Variables — group_estimates","title":"Group Estimates By Dependent\nor Independent Variables — group_estimates","text":"Groups parameter estimates information p-values table dependent variables columns independent variables rows, transpose table.","code":""},{"path":"https://sfcheung.github.io/semhelpinghands/reference/group_estimates.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Group Estimates By Dependent\nor Independent Variables — group_estimates","text":"","code":"group_by_dvs(   object,   ...,   col_name = \"est\",   add_prefix = TRUE,   group_first = FALSE,   use_standardizedSolution = FALSE )  group_by_ivs(   object,   ...,   col_name = \"est\",   add_prefix = TRUE,   group_first = FALSE,   use_standardizedSolution = FALSE )"},{"path":"https://sfcheung.github.io/semhelpinghands/reference/group_estimates.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Group Estimates By Dependent\nor Independent Variables — group_estimates","text":"object lavaan object output lavaan::parameterEstimates() lavaan::standardizedSolution(). ... Optional arguments passed lavaan::parameterEstimates(). Ignored object output lavaan::parameterEstimates() lavaan::standardizedSolution(). col_name column name information grouped. Default \"est\". accepts one name. add_prefix TRUE, default, col_name added prefix column names output. group_first TRUE, rows grouped groups first independent variables Ignored model one group. Default FALSE. use_standardizedSolution TRUE object estimates table, lavaan::standardizedSolution() used generate table. FALSE, default, lavaan::parameterEstimates() used necessary.","code":""},{"path":"https://sfcheung.github.io/semhelpinghands/reference/group_estimates.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Group Estimates By Dependent\nor Independent Variables — group_estimates","text":"data-frame-like object class est_table.","code":""},{"path":"https://sfcheung.github.io/semhelpinghands/reference/group_estimates.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Group Estimates By Dependent\nor Independent Variables — group_estimates","text":"gets lavaan object output lavaan::parameterEstimates() lavaan::standardizedSolution() group selected columns \"dependent\" variables group_by_dvs() \"independent\" variables group_by_ivs(). \"Dependent\" variables defined variables left hand side operator ~. \"Independent\" variables defined variables right hand side operator ~. Note variable can \"dependent\" variable \"independent\" variable model.","code":""},{"path":"https://sfcheung.github.io/semhelpinghands/reference/group_estimates.html","id":"author","dir":"Reference","previous_headings":"","what":"Author","title":"Group Estimates By Dependent\nor Independent Variables — group_estimates","text":"Shu Fai Cheung https://orcid.org/0000-0002-9871-9448","code":""},{"path":"https://sfcheung.github.io/semhelpinghands/reference/group_estimates.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Group Estimates By Dependent\nor Independent Variables — group_estimates","text":"","code":"library(lavaan) set.seed(5478374) n <- 50 x <- runif(n) - .5 m <- .40 * x + rnorm(n, 0, sqrt(1 - .40)) y <- .30 * m + rnorm(n, 0, sqrt(1 - .30)) dat <- data.frame(x = x, y = y, m = m) model <- ' m ~ a*x y ~ b*m ab := a*b '  fit <- sem(model, data = dat, fixed.x = FALSE) parameterEstimates(fit) #>   lhs op rhs label   est    se     z pvalue ci.lower ci.upper #> 1   m  ~   x     a 0.569 0.343 1.660  0.097   -0.103    1.240 #> 2   y  ~   m     b 0.219 0.153 1.430  0.153   -0.081    0.519 #> 3   m ~~   m       0.460 0.092 5.000  0.000    0.280    0.641 #> 4   y ~~   y       0.570 0.114 5.000  0.000    0.347    0.794 #> 5   x ~~   x       0.078 0.016 5.000  0.000    0.048    0.109 #> 6  ab := a*b    ab 0.125 0.115 1.083  0.279   -0.101    0.350  # Group by DVs group_by_dvs(fit) #>   iv est_m est_y #> m  m    -- 0.219 #> x  x 0.569    --  # Group by IVs group_by_ivs(fit) #>   dv est_m est_x #> m  m    -- 0.569 #> y  y 0.219    --"},{"path":"https://sfcheung.github.io/semhelpinghands/reference/plot_boot.html","id":null,"dir":"Reference","previous_headings":"","what":"Diagnostic Plots of Bootstrap Estimates in 'lavaan' — plot_boot","title":"Diagnostic Plots of Bootstrap Estimates in 'lavaan' — plot_boot","text":"Plots examining distribution bootstrap estimates model fitted lavaan.","code":""},{"path":"https://sfcheung.github.io/semhelpinghands/reference/plot_boot.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Diagnostic Plots of Bootstrap Estimates in 'lavaan' — plot_boot","text":"","code":"plot_boot(   object,   param,   standardized = NULL,   nclass = NULL,   hist_color = \"lightgrey\",   hist_linewidth = 1,   density_line_type = \"solid\",   density_line_color = \"blue\",   density_line_linewidth = 2,   est_line_type = \"dotted\",   est_line_color = \"red\",   est_line_linewidth = 2,   qq_dot_size = 2,   qq_dot_color = \"black\",   qq_dot_pch = 16,   qq_line_linewidth = 2,   qq_line_color = \"black\",   qq_line_linetype = \"solid\" )"},{"path":"https://sfcheung.github.io/semhelpinghands/reference/plot_boot.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Diagnostic Plots of Bootstrap Estimates in 'lavaan' — plot_boot","text":"object lavaan::lavaan object bootstrap estimates stored. standardized solution user-defined parameters, estimates need stored store_boot_est_std() store_boot_def(). param String. name parameter plotted, name appeared call coef(). standardized Logical. Whether estimates standardized solution plotted. Default NULL. required parameter users need explicitly set TRUE FALSE. nclass number breaks. argument passed hist(). Default NULL. hist_color String. color bars histogram. passed hist() argument col. Default \"lightgrey\". hist_linewidth width borders bars histogram. Default 1. density_line_type String. type line density curve histogram. passed lines() argument lty. Default \"solid\". density_line_color String. color density curve histogram. passed lines() argument col. Default \"blue\". density_line_linewidth width density curve histogram. passed lines() argument lwd. Default 2. est_line_type String. type vertical line histogram showing point estimate parameter. passed abline() argument lty. Default \"dotted\", est_line_color String. color vertical line showing point estimate histogram. passed abline() argument col. Default \"red\". est_line_linewidth width vertical line showing point estimate histogram. passed hist() argument lwd.  Default 2. qq_dot_size size points normal QQ-plot. passed qqnorm() argument cex. Default 2. qq_dot_color String. color points normal QQ-plot. passed qqnorm() argument col. Default \"black\". qq_dot_pch Numeric. shape points normal QQ-plot. passed qqnorm() argument pch. Default 16. qq_line_linewidth width diagonal line drawn normal QQ-plot. passed qqline() argument lwd. Default 2. qq_line_color String. color diagonal line drawn normal QQ-plot. passed qqline() argument col. Default \"black\". qq_line_linetype type diagonal line drawn normal QQ-plot. Default \"solid\".","code":""},{"path":"https://sfcheung.github.io/semhelpinghands/reference/plot_boot.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Diagnostic Plots of Bootstrap Estimates in 'lavaan' — plot_boot","text":"Return original lavaan::lavaan object invisibly. Called side-effect (plotting graphs).","code":""},{"path":"https://sfcheung.github.io/semhelpinghands/reference/plot_boot.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Diagnostic Plots of Bootstrap Estimates in 'lavaan' — plot_boot","text":"Rousselet, Pernet, Wilcox (2021) argued using bootstrapping, necessary examine distribution bootstrap estimates. can done boot::boot() used plot method output. easily done model fitted lavaan::lavaan(). function plot_boot() used plotting distribution bootstrap estimates model fitted lavaan format similar output boot::boot(), histogram left normal QQ-plot right. free parameters model (unstandardized), can called directly output lavaan retrieves stored estimates. estimates user-defined parameters, call store_boot_def() first compute store bootstrap estimates first. estimates standardized solution, free user-defined parameters, call store_boot_est_std() first compute store bootstrap estimates standardized solution.","code":""},{"path":"https://sfcheung.github.io/semhelpinghands/reference/plot_boot.html","id":"references","dir":"Reference","previous_headings":"","what":"References","title":"Diagnostic Plots of Bootstrap Estimates in 'lavaan' — plot_boot","text":"Rousselet, G. ., Pernet, C. R., & Wilcox, R. R. (2021). percentile bootstrap: primer step--step instructions R. Advances Methods Practices Psychological Science, 4(1), 1--10. doi:10.1177/2515245920911881","code":""},{"path":[]},{"path":"https://sfcheung.github.io/semhelpinghands/reference/plot_boot.html","id":"author","dir":"Reference","previous_headings":"","what":"Author","title":"Diagnostic Plots of Bootstrap Estimates in 'lavaan' — plot_boot","text":"Shu Fai Cheung https://orcid.org/0000-0002-9871-9448","code":""},{"path":"https://sfcheung.github.io/semhelpinghands/reference/plot_boot.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Diagnostic Plots of Bootstrap Estimates in 'lavaan' — plot_boot","text":"","code":"library(lavaan)  data(simple_mediation) mod <- \" m ~ a * x y ~ b * m + x ab := a * b \" fit <- sem(mod, simple_mediation,            se = \"bootstrap\",            bootstrap = 50,            iseed = 985714)  # Can plot bootstrap estimates for # free parameters directly # Note that 'standardized' must be always be set to # either TRUE or FALSE. No default value. plot_boot(fit, \"a\", standardized = FALSE)   # For estimates of user-defined parameters, # call store_boot_def() first. fit <- store_boot_def(fit) plot_boot(fit, \"ab\", standardized = FALSE)   # For estimates in standardized solution, # call store_boot_est_std() first. fit <- store_boot_est_std(fit) plot_boot(fit, \"a\", standardized = TRUE)  plot_boot(fit, \"ab\", standardized = TRUE)"},{"path":"https://sfcheung.github.io/semhelpinghands/reference/plot_models_fm.html","id":null,"dir":"Reference","previous_headings":"","what":"Plot Models on a Chi-Squares-vs-Dfs Graph — plot_models_fm","title":"Plot Models on a Chi-Squares-vs-Dfs Graph — plot_models_fm","text":"Plot models graph model chi-square model degrees freedom, lines equal fit measures.","code":""},{"path":"https://sfcheung.github.io/semhelpinghands/reference/plot_models_fm.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Plot Models on a Chi-Squares-vs-Dfs Graph — plot_models_fm","text":"","code":"plot_models_fm(   ...,   fit_measure = c(\"cfi\", \"tli\", \"rmsea\"),   fit_values,   line_size = 1,   label_size = 8,   point_size = 5,   position_dodge = 0.5,   include_model_values = FALSE,   include_baseline = FALSE )"},{"path":"https://sfcheung.github.io/semhelpinghands/reference/plot_models_fm.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Plot Models on a Chi-Squares-vs-Dfs Graph — plot_models_fm","text":"... lavaan::lavaan objects plotted. Can also named list lavaan::lavaan objects. list, must named names used plot. fit_measure length-one character vector fit measures use plot lines. supports \"cfi\" (default), \"tli\", \"rmsea\". fit_values numeric vector values fit measure used plot lines. default values c(.90, .95) \"cfi\" \"tli\", c(.00, .02, .05, .08) \"rmsea\". line_size size lines. Default 1. label_size size model names. Default 8. point_size size point representing model. Default 2. position_dodge Offsetting label model point. Default .5. Used ggrepel::geom_label_repel(). include_model_values TRUE , values models fit_measure added fit_values. Default FALSE. include_baseline TRUE, baseline model included plot. Default FALSE.","code":""},{"path":"https://sfcheung.github.io/semhelpinghands/reference/plot_models_fm.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Plot Models on a Chi-Squares-vs-Dfs Graph — plot_models_fm","text":"Return ggplot2::ggplot() output can modified.","code":""},{"path":"https://sfcheung.github.io/semhelpinghands/reference/plot_models_fm.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Plot Models on a Chi-Squares-vs-Dfs Graph — plot_models_fm","text":"function plots models based model chi-squares model degrees freedoms.can also add lines chi-square-df combination equal values selected fit measures. Currently supports CFI, TLI, RMSEA.","code":""},{"path":[]},{"path":"https://sfcheung.github.io/semhelpinghands/reference/plot_models_fm.html","id":"author","dir":"Reference","previous_headings":"","what":"Author","title":"Plot Models on a Chi-Squares-vs-Dfs Graph — plot_models_fm","text":"Shu Fai Cheung https://orcid.org/0000-0002-9871-9448","code":""},{"path":"https://sfcheung.github.io/semhelpinghands/reference/plot_models_fm.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Plot Models on a Chi-Squares-vs-Dfs Graph — plot_models_fm","text":"","code":"library(lavaan)  # From the help page of modificationIndices  HS.model <- '  visual  =~ x1 + x2 + x3  textual =~ x4 + x5 + x6  speed   =~ x7 + x8 + x9 '  fit <- cfa(HS.model, data = HolzingerSwineford1939) modindices(fit, sort = TRUE, op = \"=~\") #>        lhs op rhs     mi    epc sepc.lv sepc.all sepc.nox #> 30  visual =~  x9 36.411  0.577   0.519    0.515    0.515 #> 28  visual =~  x7 18.631 -0.422  -0.380   -0.349   -0.349 #> 33 textual =~  x3  9.151 -0.272  -0.269   -0.238   -0.238 #> 31 textual =~  x1  8.903  0.350   0.347    0.297    0.297 #> 26  visual =~  x5  7.441 -0.210  -0.189   -0.147   -0.147 #> 36 textual =~  x9  4.796  0.138   0.137    0.136    0.136 #> 29  visual =~  x8  4.295 -0.210  -0.189   -0.187   -0.187 #> 35 textual =~  x8  3.359 -0.121  -0.120   -0.118   -0.118 #> 27  visual =~  x6  2.843  0.111   0.100    0.092    0.092 #> 38   speed =~  x2  1.580 -0.198  -0.123   -0.105   -0.105 #> 25  visual =~  x4  1.211  0.077   0.069    0.059    0.059 #> 39   speed =~  x3  0.716  0.136   0.084    0.075    0.075 #> 42   speed =~  x6  0.273  0.044   0.027    0.025    0.025 #> 41   speed =~  x5  0.201 -0.044  -0.027   -0.021   -0.021 #> 34 textual =~  x7  0.098 -0.021  -0.021   -0.019   -0.019 #> 32 textual =~  x2  0.017 -0.011  -0.011   -0.010   -0.010 #> 37   speed =~  x1  0.014  0.024   0.015    0.013    0.013 #> 40   speed =~  x4  0.003 -0.005  -0.003   -0.003   -0.003  fit2 <- update(fit, add = \"visual =~ x9\") fit3 <- update(fit, add = \"textual =~ x3\\nvisual =~ x7\")  models <- list(Initial = fit,                Model_2 = fit2,                Model_3 = fit3) fit_cfi <- sapply(models, fitMeasures, fit.measures = \"cfi\") fit_tli <- sapply(models, fitMeasures, fit.measures = \"tli\") fit_rmsea <- sapply(models, fitMeasures, fit.measures = \"rmsea\")  # Supply the models as arguments plot_models_fm(fit, fit2, fit3)   # Plot lines for selected values on a fit measure (CFI by default) plot_models_fm(fit, fit2, fit3, fit_values = c(.90, .925, .95, fit_cfi))   # Plot the models' values on the fit measures plot_models_fm(fit, fit2, fit3, include_model_values = TRUE)   # Supply the models as a named list plot_models_fm(list(A = fit, B = fit2, C = fit3),                fit_values = c(.90, .925, .95))   # Plot the models, fit measure set to TLI plot_models_fm(fit, fit2, fit3, fit_measure = \"tli\")  plot_models_fm(fit, fit2, fit3, fit_measure = \"tli\",                fit_values = c(.90, .925, .95, fit_tli))  plot_models_fm(fit, fit2, fit3, fit_measure = \"tli\",                include_model_values = TRUE)   # Plot the models, fit measure set to RMSEA plot_models_fm(fit, fit2, fit3, fit_measure = \"rmsea\")  plot_models_fm(fit, fit2, fit3, fit_measure = \"rmsea\",                include_model_values = TRUE)"},{"path":"https://sfcheung.github.io/semhelpinghands/reference/print.est_table.html","id":null,"dir":"Reference","previous_headings":"","what":"Print an 'est_table' Object — print.est_table","title":"Print an 'est_table' Object — print.est_table","text":"Print method 'est_table' object","code":""},{"path":"https://sfcheung.github.io/semhelpinghands/reference/print.est_table.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Print an 'est_table' Object — print.est_table","text":"","code":"# S3 method for est_table print(x, ..., nd = 3, empty_cells = \"--\", group_first = FALSE)"},{"path":"https://sfcheung.github.io/semhelpinghands/reference/print.est_table.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Print an 'est_table' Object — print.est_table","text":"x Object class est_table. ... Optional arguments passed print() methods. nd number digits printed. Default 3. (Scientific notation never used.) empty_cells String printed empty cells cells values. Default \"--\". group_first used.","code":""},{"path":"https://sfcheung.github.io/semhelpinghands/reference/print.est_table.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Print an 'est_table' Object — print.est_table","text":"x returned invisibly. Called side effect.","code":""},{"path":"https://sfcheung.github.io/semhelpinghands/reference/print.est_table.html","id":"author","dir":"Reference","previous_headings":"","what":"Author","title":"Print an 'est_table' Object — print.est_table","text":"Shu Fai Cheung https://orcid.org/0000-0002-9871-9448","code":""},{"path":"https://sfcheung.github.io/semhelpinghands/reference/print.std_solution_boot.html","id":null,"dir":"Reference","previous_headings":"","what":"Print an 'std_solution_boot' Object — print.std_solution_boot","title":"Print an 'std_solution_boot' Object — print.std_solution_boot","text":"Print method 'std_solution_boot' object, output standardizedSolution_boot_ci().","code":""},{"path":"https://sfcheung.github.io/semhelpinghands/reference/print.std_solution_boot.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Print an 'std_solution_boot' Object — print.std_solution_boot","text":"","code":"# S3 method for std_solution_boot print(x, ..., nd = 3, output = c(\"table\", \"text\"), standardized_only = TRUE)"},{"path":"https://sfcheung.github.io/semhelpinghands/reference/print.std_solution_boot.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Print an 'std_solution_boot' Object — print.std_solution_boot","text":"x Object class std_solution_boot. ... Optional arguments passed print() methods. nd number digits decimal place. Default 3. output String. results printed. Default \"table\" results printed table format similar lavaan::standardizedSolution(). \"text\", results printed text format similar printout output summary() lavaan object. standardized_only Logical. TRUE, default, results standardized solution printed. FALSE, standardized solution printed alongside unstandardized solution, printout output summary() lavaan object.","code":""},{"path":"https://sfcheung.github.io/semhelpinghands/reference/print.std_solution_boot.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Print an 'std_solution_boot' Object — print.std_solution_boot","text":"x returned invisibly. Called side effect.","code":""},{"path":"https://sfcheung.github.io/semhelpinghands/reference/print.std_solution_boot.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Print an 'std_solution_boot' Object — print.std_solution_boot","text":"default format printout lavaan::standardizedSolution(), compact easy read. Users can request format similar printout summary lavaan output setting output \"text\". \"text\" format, users can also select whether standardized solution printed (default) whether standardized solution appended right printout.","code":""},{"path":[]},{"path":"https://sfcheung.github.io/semhelpinghands/reference/print.std_solution_boot.html","id":"author","dir":"Reference","previous_headings":"","what":"Author","title":"Print an 'std_solution_boot' Object — print.std_solution_boot","text":"Shu Fai Cheung https://orcid.org/0000-0002-9871-9448","code":""},{"path":"https://sfcheung.github.io/semhelpinghands/reference/print.std_solution_boot.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Print an 'std_solution_boot' Object — print.std_solution_boot","text":"","code":"library(lavaan) set.seed(5478374) n <- 50 x <- runif(n) - .5 m <- .40 * x + rnorm(n, 0, sqrt(1 - .40)) y <- .30 * m + rnorm(n, 0, sqrt(1 - .30)) dat <- data.frame(x = x, y = y, m = m) model <- ' m ~ a*x y ~ b*m ab := a*b '  # Should set bootstrap to at least 2000 in real studies fit <- sem(model, data = dat, fixed.x = FALSE,            se = \"boot\",            bootstrap = 50) std_out <- standardizedSolution_boot_ci(fit) std_out #>   lhs op rhs label est.std    se      z pvalue ci.lower ci.upper boot.ci.lower #> 1   m  ~   x     a   0.229 0.117  1.955  0.051   -0.001    0.458        -0.025 #> 2   y  ~   m     b   0.198 0.121  1.644  0.100   -0.038    0.434        -0.005 #> 3   m ~~   m         0.948 0.053 17.729  0.000    0.843    1.053         0.786 #> 4   y ~~   y         0.961 0.048 20.110  0.000    0.867    1.054         0.758 #> 5   x ~~   x         1.000 0.000     NA     NA    1.000    1.000            NA #> 6  ab := a*b    ab   0.045 0.037  1.240  0.215   -0.026    0.117        -0.006 #>   boot.ci.upper boot.se #> 1         0.462   0.121 #> 2         0.492   0.112 #> 3         1.000   0.055 #> 4         0.999   0.056 #> 5            NA      NA #> 6         0.151   0.038 print(std_out, output = \"text\") #>  #> Standardized Estimates Only #>  #>   Standard errors                            Bootstrap #>   Confidence interval                        Bootstrap #>   Confidence Level                               95.0% #>   Standardization Type                         std.all #>   Number of requested bootstrap draws               50 #>   Number of successful bootstrap draws              50 #>  #> Regressions: #>                Standardized  Std.Err ci.lower ci.upper #>   m ~                                                  #>     x          (a)    0.229    0.121   -0.025    0.462 #>   y ~                                                  #>     m          (b)    0.198    0.112   -0.005    0.492 #>  #> Variances: #>                Standardized  Std.Err ci.lower ci.upper #>    .m                 0.948    0.055    0.786    1.000 #>    .y                 0.961    0.056    0.758    0.999 #>     x                 1.000       NA       NA       NA #>  #> Defined Parameters: #>                Standardized  Std.Err ci.lower ci.upper #>     ab                0.045    0.038   -0.006    0.151 #>  print(std_out, output = \"text\", standardized_only = FALSE) #>  #> Parameter Estimates: #>  #>   Standard errors                            Bootstrap #>   Number of requested bootstrap draws               50 #>   Number of successful bootstrap draws              50 #>  #> Regressions: #>                    Estimate  Std.Err  z-value  P(>|z|) ci.lower ci.upper #>   m ~                                                                    #>     x          (a)    0.569    0.293    1.942    0.052   -0.056    1.165 #>   y ~                                                                    #>     m          (b)    0.219    0.147    1.490    0.136   -0.002    0.725 #>  Standardized ci.std.lower ci.std.upper Std.Err.std #>                                                     #>     0.229       -0.025        0.462        0.121    #>                                                     #>     0.198       -0.005        0.492        0.112    #>  #> Variances: #>                    Estimate  Std.Err  z-value  P(>|z|) ci.lower ci.upper #>    .m                 0.460    0.083    5.556    0.000    0.247    0.593 #>    .y                 0.570    0.109    5.229    0.000    0.341    0.792 #>     x                 0.078    0.013    5.924    0.000    0.052    0.102 #>  Standardized ci.std.lower ci.std.upper Std.Err.std #>     0.948        0.786        1.000        0.055    #>     0.961        0.758        0.999        0.056    #>     1.000           NA           NA           NA    #>  #> Defined Parameters: #>                    Estimate  Std.Err  z-value  P(>|z|) ci.lower ci.upper #>     ab                0.125    0.107    1.160    0.246   -0.019    0.440 #>  Standardized ci.std.lower ci.std.upper Std.Err.std #>     0.045       -0.006        0.151        0.038    #>"},{"path":"https://sfcheung.github.io/semhelpinghands/reference/ptable_to_syntax.html","id":null,"dir":"Reference","previous_headings":"","what":"Convert a 'lavaan' Parameter\nTable to a 'lavaan' Model Syntax — ptable_to_syntax","title":"Convert a 'lavaan' Parameter\nTable to a 'lavaan' Model Syntax — ptable_to_syntax","text":"tries generate 'lavaan' model syntax lavaan parameter table.","code":""},{"path":"https://sfcheung.github.io/semhelpinghands/reference/ptable_to_syntax.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Convert a 'lavaan' Parameter\nTable to a 'lavaan' Model Syntax — ptable_to_syntax","text":"","code":"ptable_to_syntax(fit)  compare_ptables(object1, object2)"},{"path":"https://sfcheung.github.io/semhelpinghands/reference/ptable_to_syntax.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Convert a 'lavaan' Parameter\nTable to a 'lavaan' Model Syntax — ptable_to_syntax","text":"fit lavaan parameter table. example, output lavaan::parameterTable(). object1 first lavaan parameter table, compared object2. set lavaan object (e.g., output lavaan::sem() lavaan::cfa()), parameter table extracted . object2 second lavaan parameter table, compared object1. set lavaan object (e.g., output lavaan::sem() lavaan::cfa()), parameter table extracted .","code":""},{"path":"https://sfcheung.github.io/semhelpinghands/reference/ptable_to_syntax.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Convert a 'lavaan' Parameter\nTable to a 'lavaan' Model Syntax — ptable_to_syntax","text":"ptable_to_syntax() returns length-one character vector stores generated lavaan model syntax. compare_ptables() returns length-one logical vector. TRUE two models identical form. FALSE identical.","code":""},{"path":"https://sfcheung.github.io/semhelpinghands/reference/ptable_to_syntax.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Convert a 'lavaan' Parameter\nTable to a 'lavaan' Model Syntax — ptable_to_syntax","text":"function tries convert lavaan parameter table text representation lavaan model specified model syntax. users call lavaan::sem(), addition model syntax, arguments stored syntax also used produce final model (e.g., meanstructure, fixed.x, std.lv). produce exactly model, arguments also needed specified, difficult generate using parameter table. Therefore, model syntax produced state aspects model explicitly, even aspects usually can omitted due default values arguments. approach requires users call lavaan::lavaan() directly, instead wrappers (e.g, lavaan::sem()), produce parameter table. model syntax produced way difficult read. However, ensures original model can reproduced, without need know arguments set. Due nearly unlimited possibilities form model, recommended compare model generated model syntax original parameter table using compare_ptables(). compares forms two models, including user starting values, . compare parameter estimates standard errors.","code":""},{"path":"https://sfcheung.github.io/semhelpinghands/reference/ptable_to_syntax.html","id":"limitations","dir":"Reference","previous_headings":"","what":"Limitations","title":"Convert a 'lavaan' Parameter\nTable to a 'lavaan' Model Syntax — ptable_to_syntax","text":"function ptable_to_syntax() yet support following models: Multiple-group models. Multilevel models. Models categorical variables. Models user-specified lower upper bounds. Models operator <~. Models constraints imposed equal(). Models labels spaces. Models labels syntax operators (e.g., ~, =~, etc.).","code":""},{"path":"https://sfcheung.github.io/semhelpinghands/reference/ptable_to_syntax.html","id":"functions","dir":"Reference","previous_headings":"","what":"Functions","title":"Convert a 'lavaan' Parameter\nTable to a 'lavaan' Model Syntax — ptable_to_syntax","text":"ptable_to_syntax(): Convert lavaan parameter lavaan model syntax. compare_ptables(): Compare two lavaan parameter tables.","code":""},{"path":[]},{"path":"https://sfcheung.github.io/semhelpinghands/reference/ptable_to_syntax.html","id":"author","dir":"Reference","previous_headings":"","what":"Author","title":"Convert a 'lavaan' Parameter\nTable to a 'lavaan' Model Syntax — ptable_to_syntax","text":"Shu Fai Cheung https://orcid.org/0000-0002-9871-9448 function inspired discussion Google Group https://groups.google.com/g/lavaan/c/1ueFiue9qLM/m/cJhxDoqeBAAJ.","code":""},{"path":"https://sfcheung.github.io/semhelpinghands/reference/ptable_to_syntax.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Convert a 'lavaan' Parameter\nTable to a 'lavaan' Model Syntax — ptable_to_syntax","text":"","code":"library(lavaan)  mod <- \" visual  =~ x3 + x1 + x2 textual =~ x4 + x6 + x5 speed   =~ x7 + x8 + x9 + start(0.1) * x6 visual ~ a*textual speed ~ b*visual ab: = a * b \"  fit <- sem(mod, data = HolzingerSwineford1939)  mod_chk <- ptable_to_syntax(fit) cat(mod_chk, sep = \"\\n\") #> visual =~ 1*x3 + x1 + x2 #> textual =~ 1*x4 + x6 + x5 #> speed =~ 1*x7 + x8 + x9 + start(0.1)*x6 #> visual ~ a*textual #> speed ~ b*visual #> ab := a*b #> x3 ~~ x3 #> x1 ~~ x1 #> x2 ~~ x2 #> x4 ~~ x4 #> x6 ~~ x6 #> x5 ~~ x5 #> x7 ~~ x7 #> x8 ~~ x8 #> x9 ~~ x9 #> visual ~~ visual #> textual ~~ textual #> speed ~~ speed # Need to call lavaan() directly fit_chk <- lavaan(mod_chk, data = HolzingerSwineford1939) fit_chk #> lavaan 0.6.16 ended normally after 33 iterations #>  #>   Estimator                                         ML #>   Optimization method                           NLMINB #>   Number of model parameters                        21 #>  #>   Number of observations                           301 #>  #> Model Test User Model: #>                                                        #>   Test statistic                                85.782 #>   Degrees of freedom                                24 #>   P-value (Chi-square)                           0.000 fit #> lavaan 0.6.16 ended normally after 33 iterations #>  #>   Estimator                                         ML #>   Optimization method                           NLMINB #>   Number of model parameters                        21 #>  #>   Number of observations                           301 #>  #> Model Test User Model: #>                                                        #>   Test statistic                                85.782 #>   Degrees of freedom                                24 #>   P-value (Chi-square)                           0.000 # Compare the parameter table: (ptable1 <- parameterTable(fit)) #>    id     lhs op     rhs user block group free ustart exo label plabel start #> 1   1  visual =~      x3    1     1     1    0    1.0   0         .p1. 1.000 #> 2   2  visual =~      x1    1     1     1    1     NA   0         .p2. 0.903 #> 3   3  visual =~      x2    1     1     1    2     NA   0         .p3. 0.702 #> 4   4 textual =~      x4    1     1     1    0    1.0   0         .p4. 1.000 #> 5   5 textual =~      x6    1     1     1    3     NA   0         .p5. 0.924 #> 6   6 textual =~      x5    1     1     1    4     NA   0         .p6. 1.133 #> 7   7   speed =~      x7    1     1     1    0    1.0   0         .p7. 1.000 #> 8   8   speed =~      x8    1     1     1    5     NA   0         .p8. 1.221 #> 9   9   speed =~      x9    1     1     1    6     NA   0         .p9. 0.874 #> 10 10   speed =~      x6    1     1     1    7    0.1   0        .p10. 0.100 #> 11 11  visual  ~ textual    1     1     1    8     NA   0     a  .p11. 0.000 #> 12 12   speed  ~  visual    1     1     1    9     NA   0     b  .p12. 0.000 #> 13 13      x3 ~~      x3    0     1     1   10     NA   0        .p13. 0.637 #> 14 14      x1 ~~      x1    0     1     1   11     NA   0        .p14. 0.679 #> 15 15      x2 ~~      x2    0     1     1   12     NA   0        .p15. 0.691 #> 16 16      x4 ~~      x4    0     1     1   13     NA   0        .p16. 0.675 #> 17 17      x6 ~~      x6    0     1     1   14     NA   0        .p17. 0.598 #> 18 18      x5 ~~      x5    0     1     1   15     NA   0        .p18. 0.830 #> 19 19      x7 ~~      x7    0     1     1   16     NA   0        .p19. 0.592 #> 20 20      x8 ~~      x8    0     1     1   17     NA   0        .p20. 0.511 #> 21 21      x9 ~~      x9    0     1     1   18     NA   0        .p21. 0.508 #> 22 22  visual ~~  visual    0     1     1   19     NA   0        .p22. 0.050 #> 23 23 textual ~~ textual    0     1     1   20     NA   0        .p23. 0.050 #> 24 24   speed ~~   speed    0     1     1   21     NA   0        .p24. 0.050 #> 25 25      ab :=     a*b    1     0     0    0     NA   0    ab        0.000 #>      est    se #> 1  1.000 0.000 #> 2  1.366 0.200 #> 3  0.759 0.138 #> 4  1.000 0.000 #> 5  0.914 0.057 #> 6  1.112 0.065 #> 7  1.000 0.000 #> 8  1.193 0.168 #> 9  1.091 0.153 #> 10 0.060 0.082 #> 11 0.307 0.057 #> 12 0.456 0.097 #> 13 0.846 0.090 #> 14 0.558 0.109 #> 15 1.135 0.102 #> 16 0.369 0.048 #> 17 0.358 0.043 #> 18 0.445 0.059 #> 19 0.806 0.082 #> 20 0.484 0.075 #> 21 0.566 0.071 #> 22 0.336 0.077 #> 23 0.982 0.112 #> 24 0.288 0.069 #> 25 0.140 0.034 (ptable2 <- parameterTable(fit_chk)) #>    id     lhs op     rhs user block group free ustart exo label plabel start #> 1   1  visual =~      x3    1     1     1    0    1.0   0         .p1. 1.000 #> 2   2  visual =~      x1    1     1     1    1     NA   0         .p2. 0.903 #> 3   3  visual =~      x2    1     1     1    2     NA   0         .p3. 0.702 #> 4   4 textual =~      x4    1     1     1    0    1.0   0         .p4. 1.000 #> 5   5 textual =~      x6    1     1     1    3     NA   0         .p5. 0.924 #> 6   6 textual =~      x5    1     1     1    4     NA   0         .p6. 1.133 #> 7   7   speed =~      x7    1     1     1    0    1.0   0         .p7. 1.000 #> 8   8   speed =~      x8    1     1     1    5     NA   0         .p8. 1.221 #> 9   9   speed =~      x9    1     1     1    6     NA   0         .p9. 0.874 #> 10 10   speed =~      x6    1     1     1    7    0.1   0        .p10. 0.100 #> 11 11  visual  ~ textual    1     1     1    8     NA   0     a  .p11. 0.000 #> 12 12   speed  ~  visual    1     1     1    9     NA   0     b  .p12. 0.000 #> 13 13      x3 ~~      x3    1     1     1   10     NA   0        .p13. 0.637 #> 14 14      x1 ~~      x1    1     1     1   11     NA   0        .p14. 0.679 #> 15 15      x2 ~~      x2    1     1     1   12     NA   0        .p15. 0.691 #> 16 16      x4 ~~      x4    1     1     1   13     NA   0        .p16. 0.675 #> 17 17      x6 ~~      x6    1     1     1   14     NA   0        .p17. 0.598 #> 18 18      x5 ~~      x5    1     1     1   15     NA   0        .p18. 0.830 #> 19 19      x7 ~~      x7    1     1     1   16     NA   0        .p19. 0.592 #> 20 20      x8 ~~      x8    1     1     1   17     NA   0        .p20. 0.511 #> 21 21      x9 ~~      x9    1     1     1   18     NA   0        .p21. 0.508 #> 22 22  visual ~~  visual    1     1     1   19     NA   0        .p22. 0.050 #> 23 23 textual ~~ textual    1     1     1   20     NA   0        .p23. 0.050 #> 24 24   speed ~~   speed    1     1     1   21     NA   0        .p24. 0.050 #> 25 25      ab :=     a*b    1     0     0    0     NA   0    ab        0.000 #>      est    se #> 1  1.000 0.000 #> 2  1.366 0.200 #> 3  0.759 0.138 #> 4  1.000 0.000 #> 5  0.914 0.057 #> 6  1.112 0.065 #> 7  1.000 0.000 #> 8  1.193 0.168 #> 9  1.091 0.153 #> 10 0.060 0.082 #> 11 0.307 0.057 #> 12 0.456 0.097 #> 13 0.846 0.090 #> 14 0.558 0.109 #> 15 1.135 0.102 #> 16 0.369 0.048 #> 17 0.358 0.043 #> 18 0.445 0.059 #> 19 0.806 0.082 #> 20 0.484 0.075 #> 21 0.566 0.071 #> 22 0.336 0.077 #> 23 0.982 0.112 #> 24 0.288 0.069 #> 25 0.140 0.034 compare_ptables(ptable1, ptable2) #> [1] TRUE"},{"path":"https://sfcheung.github.io/semhelpinghands/reference/record_history.html","id":null,"dir":"Reference","previous_headings":"","what":"Record the Minimization\nHistory — record_history","title":"Record the Minimization\nHistory — record_history","text":"Record minimization history model fitted lavaan::lavaan() wrappers (e.g., lavaan::sem() lavaan::cfa()).","code":""},{"path":"https://sfcheung.github.io/semhelpinghands/reference/record_history.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Record the Minimization\nHistory — record_history","text":"","code":"record_history(object)  # S3 method for fit_history plot(x, params, last_n = -1, orientation = c(\"horizontal\", \"vertical\"), ...)  # S3 method for fit_history print(x, n_iterations = 10, digits = 3, ...)"},{"path":"https://sfcheung.github.io/semhelpinghands/reference/record_history.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Record the Minimization\nHistory — record_history","text":"object lavaan object. x fit_history class object, output record_history(). params character vector names parameters plotted. Must names one columns x. last_n lass n iterations plotted. Default -1, plotting iterations. orientation orientation plot. Either \"horizontal\" (default) \"vertical\". ... Optional arguments. passed print method data frame. n_iterations number iterations print. Default 10, printing first 10 iterations (iterations, number iterations less 10). digits number digits displayed. Default 3.","code":""},{"path":"https://sfcheung.github.io/semhelpinghands/reference/record_history.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Record the Minimization\nHistory — record_history","text":"fit_history-class object plot method (plot.fit_history()).","code":""},{"path":"https://sfcheung.github.io/semhelpinghands/reference/record_history.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Record the Minimization\nHistory — record_history","text":"records minimization history model fitted lavaan::lavaan() wrappers (e.g., lavaan::sem() lavaan::cfa()). recorded history can plotted displayed, visualizing estimates free parameters found. refit model update method lavaan::lavaan, setting se = \"none\" test = \"standard\" impact minimization process. related functions adapted package semunpack. version package revised advanced version intended diagnostic purpose real studies.","code":""},{"path":"https://sfcheung.github.io/semhelpinghands/reference/record_history.html","id":"functions","dir":"Reference","previous_headings":"","what":"Functions","title":"Record the Minimization\nHistory — record_history","text":"plot(fit_history): plot method output record_history(). print(fit_history): print method output record_history().","code":""},{"path":"https://sfcheung.github.io/semhelpinghands/reference/record_history.html","id":"author","dir":"Reference","previous_headings":"","what":"Author","title":"Record the Minimization\nHistory — record_history","text":"Shu Fai Cheung https://orcid.org/0000-0002-9871-9448","code":""},{"path":"https://sfcheung.github.io/semhelpinghands/reference/record_history.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Record the Minimization\nHistory — record_history","text":"","code":"# Adapted from the example for CFA in lavaan::cfa(). # Using only two of the factors library(lavaan) HS.model <- ' visual  =~ x1 + x2 + x3 textual =~ x4 + x5 + x6 ' fit <- cfa(HS.model, data = HolzingerSwineford1939)  # Refit the model with the history recorded fit_h <- record_history(fit) fit_h #> Original call: #> lavaan::lavaan(model = HS.model, data = HolzingerSwineford1939,  #>     model.type = \"cfa\", int.ov.free = TRUE, int.lv.free = FALSE,  #>     auto.fix.first = TRUE, auto.fix.single = TRUE, auto.var = TRUE,  #>     auto.cov.lv.x = TRUE, auto.cov.y = TRUE, auto.th = TRUE,  #>     auto.delta = TRUE, auto.efa = TRUE) #> The number of iterations: 29  #> The minimization history for the first 10 iterations: #>    iteration     f visual=~x2 visual=~x3 textual=~x5 textual=~x6 x1~~x1 x2~~x2 #> 1          0 1.483      0.778      1.107       1.133       0.924  0.679  0.691 #> 2          1 0.349      0.791      1.126       1.161       0.950  0.746  0.767 #> 3          2 0.319      0.821      1.061       1.156       0.986  0.781  0.943 #> 4          3 0.184      0.791      0.943       1.115       0.940  0.799  0.995 #> 5          4 0.171      0.707      0.787       1.008       0.970  0.790  1.055 #> 6          5 0.061      0.668      0.768       1.115       0.876  0.767  1.062 #> 7          6 0.046      0.660      0.867       1.143       0.927  0.713  1.061 #> 8          7 0.045      0.653      0.853       1.125       0.943  0.668  1.075 #> 9          8 0.043      0.663      0.843       1.118       0.952  0.655  1.077 #> 10         9 0.042      0.660      0.830       1.128       0.930  0.651  1.081 #>    x3~~x3 x4~~x4 x5~~x5 x6~~x6 visual~~visual textual~~textual visual~~textual #> 1   0.637  0.675  0.830  0.598          0.050            0.050           0.000 #> 2   0.702  0.727  0.871  0.658          0.481            0.781           0.505 #> 3   0.799  0.599  0.783  0.504          0.916            1.082          -0.285 #> 4   0.752  0.408  0.600  0.298          0.901            1.072          -0.162 #> 5   0.682  0.233  0.298  0.311          0.803            1.008           0.143 #> 6   0.674  0.415  0.439  0.410          0.717            0.944           0.307 #> 7   0.768  0.389  0.464  0.368          0.700            0.938           0.335 #> 8   0.788  0.387  0.451  0.348          0.662            0.931           0.393 #> 9   0.797  0.381  0.455  0.343          0.675            0.952           0.350 #> 10  0.801  0.372  0.447  0.352          0.680            0.951           0.351  # Plot the history for selected parameters plot(fit_h, params = c(\"visual=~x2\", \"visual=~x3\",                        \"visual~~textual\"),             last_n = 10)  plot(fit_h, params = c(\"visual=~x2\", \"visual=~x3\",                        \"visual~~textual\"),             last_n = 10,             orientation = \"vertical\")"},{"path":"https://sfcheung.github.io/semhelpinghands/reference/semhelpinghands-package.html","id":null,"dir":"Reference","previous_headings":"","what":"semhelpinghands: Helper Functions for Structural Equation Modeling — semhelpinghands-package","title":"semhelpinghands: Helper Functions for Structural Equation Modeling — semhelpinghands-package","text":"assortment helper functions structural equation modeling, mainly 'lavaan' now. time-saving functions common tasks structural equation modeling reading output. package functions implement advanced statistical procedures. light-weight package simple functions simple tasks conveniently, dependencies possible.","code":""},{"path":[]},{"path":"https://sfcheung.github.io/semhelpinghands/reference/semhelpinghands-package.html","id":"author","dir":"Reference","previous_headings":"","what":"Author","title":"semhelpinghands: Helper Functions for Structural Equation Modeling — semhelpinghands-package","text":"Maintainer: Shu Fai Cheung shufai.cheung@gmail.com (ORCID)","code":""},{"path":"https://sfcheung.github.io/semhelpinghands/reference/show_ifi.html","id":null,"dir":"Reference","previous_headings":"","what":"Visualize How CFI and TLI Are Computed — show_cfi","title":"Visualize How CFI and TLI Are Computed — show_cfi","text":"Show CFI TLI computed using graph model chi-square vs. model degrees freedom.","code":""},{"path":"https://sfcheung.github.io/semhelpinghands/reference/show_ifi.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Visualize How CFI and TLI Are Computed — show_cfi","text":"","code":"show_cfi(fit, ...)  show_tli(fit, ...)  show_ifi(fit, fit_measures = c(\"cfi\", \"tli\"), test = c(\"standard\"))"},{"path":"https://sfcheung.github.io/semhelpinghands/reference/show_ifi.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Visualize How CFI and TLI Are Computed — show_cfi","text":"fit output lavaan::lavaan() wrappers (e.g., lavaan::cfa() lavaan::sem()). ... Arguments passed show_ifi(). fit_measures fit measures plotted. Acceptable values \"cfi\" \"tli\". test type model chi-square test. corresponds test argument lavaan::lavaan() wrappers. \"standard\" supported now.","code":""},{"path":"https://sfcheung.github.io/semhelpinghands/reference/show_ifi.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Visualize How CFI and TLI Are Computed — show_cfi","text":"output ggplot2::ggplot() can modified.","code":""},{"path":"https://sfcheung.github.io/semhelpinghands/reference/show_ifi.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Visualize How CFI and TLI Are Computed — show_cfi","text":"function receives output lavaan::lavaan() wrappers (e.g., lavaan::cfa() lavaan::sem()) illustrates CFI computed.","code":""},{"path":"https://sfcheung.github.io/semhelpinghands/reference/show_ifi.html","id":"functions","dir":"Reference","previous_headings":"","what":"Functions","title":"Visualize How CFI and TLI Are Computed — show_cfi","text":"show_cfi(): wrapper show_ifi() fit_measures = \"cfi\". show_tli(): wrapper show_ifi() fit_measures = \"tli\".","code":""},{"path":"https://sfcheung.github.io/semhelpinghands/reference/show_ifi.html","id":"author","dir":"Reference","previous_headings":"","what":"Author","title":"Visualize How CFI and TLI Are Computed — show_cfi","text":"Shu Fai Cheung https://orcid.org/0000-0002-9871-9448","code":""},{"path":"https://sfcheung.github.io/semhelpinghands/reference/show_ifi.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Visualize How CFI and TLI Are Computed — show_cfi","text":"","code":"library(lavaan)  # From the help page of lavaan::cfa().  HS.model <- ' visual  =~ x1 + x2 + x3 textual =~ x4 + x5 + x6 speed   =~ x7 + x8 + x9 ' fit <- cfa(HS.model, data = HolzingerSwineford1939)  # By default show how CFI is computed show_ifi(fit)   # Show how TLI is computed show_ifi(fit, fit_measures = \"tli\")   # Wrappers show_cfi(fit)  show_tli(fit)"},{"path":"https://sfcheung.github.io/semhelpinghands/reference/show_more_options.html","id":null,"dir":"Reference","previous_headings":"","what":"Show More Major Options in an\nOutput of 'lavaan' — show_more_options","title":"Show More Major Options in an\nOutput of 'lavaan' — show_more_options","text":"Display values major options model fitted lavaan::lavaan() wrappers (e.g., lavaan::sem lavaan::cfa()).","code":""},{"path":"https://sfcheung.github.io/semhelpinghands/reference/show_more_options.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Show More Major Options in an\nOutput of 'lavaan' — show_more_options","text":"","code":"show_more_options(fit)  # S3 method for show_more_options print(x, ...)"},{"path":"https://sfcheung.github.io/semhelpinghands/reference/show_more_options.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Show More Major Options in an\nOutput of 'lavaan' — show_more_options","text":"fit output lavaan::lavaan() wrappers (e.g., lavaan::cfa() lavaan::sem()) x output show_more_options(). ... Additional arguments. Ignored.","code":""},{"path":"https://sfcheung.github.io/semhelpinghands/reference/show_more_options.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Show More Major Options in an\nOutput of 'lavaan' — show_more_options","text":"show_more_options-class object print method formats output.","code":""},{"path":"https://sfcheung.github.io/semhelpinghands/reference/show_more_options.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Show More Major Options in an\nOutput of 'lavaan' — show_more_options","text":"extracts values major options output lavaan::lavaan() wrappers (e.g., lavaan::sem lavaan::cfa(). values also reported summary lavaan object. function used show values one single table quick overview. checks actual values, call used. useful understanding prepackaged estimator ML, MLM, MLR set options. supports following options: Estimator (estimator) Standard error (se) Model chi-square test(s) (test) Missing data method (missing) Information matrix used computing standard errors (information) Information matrix used computing model chi-square (information) Whether mean structure included. named show_more_options() differentiate show_options(), originally semunpack package, intended new users lavaan. code adapted show_options advanced options added.","code":""},{"path":"https://sfcheung.github.io/semhelpinghands/reference/show_more_options.html","id":"methods-by-generic-","dir":"Reference","previous_headings":"","what":"Methods (by generic)","title":"Show More Major Options in an\nOutput of 'lavaan' — show_more_options","text":"print(show_more_options): print method output show_more_options().","code":""},{"path":"https://sfcheung.github.io/semhelpinghands/reference/show_more_options.html","id":"author","dir":"Reference","previous_headings":"","what":"Author","title":"Show More Major Options in an\nOutput of 'lavaan' — show_more_options","text":"Shu Fai Cheung https://orcid.org/0000-0002-9871-9448","code":""},{"path":"https://sfcheung.github.io/semhelpinghands/reference/show_more_options.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Show More Major Options in an\nOutput of 'lavaan' — show_more_options","text":"","code":"library(lavaan)  # From the help page of lavaan::cfa().  HS.model <- ' visual  =~ x1 + x2 + x3 textual =~ x4 + x5 + x6 speed   =~ x7 + x8 + x9 ' fit <- cfa(HS.model, data = HolzingerSwineford1939)  tmp <- show_more_options(fit) tmp #>  Options                             Call    Actual   #>  Estimator(s)                        default ML       #>  Standard Error (SE)                 default standard #>  Model Test Statistic(s)             default standard #>  How Missing Data is Handled         default listwise #>  Information Matrix (for SE)         default expected #>  Information Matrix (for Model Test) default expected #>  Mean Structure                      default No       #>  'x' Fixed                           default FALSE     fit <- cfa(HS.model, data = HolzingerSwineford1939, estimator = \"MLR\") show_more_options(fit) #>  Options                             Call    Actual             #>  Estimator(s)                        MLR     ML                 #>  Standard Error (SE)                 default robust.huber.white #>  Model Test Statistic(s)             default yuan.bentler.mplus #>  How Missing Data is Handled         default listwise           #>  Information Matrix (for SE)         default observed           #>  Information Matrix (for Model Test) default observed           #>  Mean Structure                      default No                 #>  'x' Fixed                           default FALSE              fit <- cfa(HS.model, data = HolzingerSwineford1939, estimator = \"MLM\") show_more_options(fit) #>  Options                             Call    Actual          #>  Estimator(s)                        MLM     ML              #>  Standard Error (SE)                 default robust.sem      #>  Model Test Statistic(s)             default satorra.bentler #>  How Missing Data is Handled         default listwise        #>  Information Matrix (for SE)         default expected        #>  Information Matrix (for Model Test) default expected        #>  Mean Structure                      default No              #>  'x' Fixed                           default FALSE"},{"path":"https://sfcheung.github.io/semhelpinghands/reference/show_options.html","id":null,"dir":"Reference","previous_headings":"","what":"Show Major Options in an\nOutput of 'lavaan' — show_options","title":"Show Major Options in an\nOutput of 'lavaan' — show_options","text":"Display values major options model fitted lavaan::lavaan() wrappers (e.g., lavaan::sem() lavaan::cfa()).","code":""},{"path":"https://sfcheung.github.io/semhelpinghands/reference/show_options.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Show Major Options in an\nOutput of 'lavaan' — show_options","text":"","code":"show_options(fit)  # S3 method for show_options print(x, ...)"},{"path":"https://sfcheung.github.io/semhelpinghands/reference/show_options.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Show Major Options in an\nOutput of 'lavaan' — show_options","text":"fit output lavaan::lavaan() wrappers (e.g., lavaan::cfa() lavaan::sem()) x output show_options(). ... Additional arguments. Ignored.","code":""},{"path":"https://sfcheung.github.io/semhelpinghands/reference/show_options.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Show Major Options in an\nOutput of 'lavaan' — show_options","text":"show_options-class object print method formats output.","code":""},{"path":"https://sfcheung.github.io/semhelpinghands/reference/show_options.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Show Major Options in an\nOutput of 'lavaan' — show_options","text":"extracts values major options output lavaan::lavaan() wrappers (e.g., lavaan::sem() lavaan::cfa(). checks actual values, call used. useful understanding prepackaged estimator ML, MLM, MLR set options. supports following options: Estimator (estimator) Standard error (se) Model chi-square test(s) (test) Missing data method (missing) Information matrix used computing standard errors (information) Information matrix used computing model chi-square (information) Whether mean structure included.","code":""},{"path":"https://sfcheung.github.io/semhelpinghands/reference/show_options.html","id":"methods-by-generic-","dir":"Reference","previous_headings":"","what":"Methods (by generic)","title":"Show Major Options in an\nOutput of 'lavaan' — show_options","text":"print(show_options): print method output show_options().","code":""},{"path":"https://sfcheung.github.io/semhelpinghands/reference/show_options.html","id":"author","dir":"Reference","previous_headings":"","what":"Author","title":"Show Major Options in an\nOutput of 'lavaan' — show_options","text":"Shu Fai Cheung https://orcid.org/0000-0002-9871-9448","code":""},{"path":"https://sfcheung.github.io/semhelpinghands/reference/show_options.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Show Major Options in an\nOutput of 'lavaan' — show_options","text":"","code":"library(lavaan)  # From the help page of lavaan::cfa().  HS.model <- ' visual  =~ x1 + x2 + x3 textual =~ x4 + x5 + x6 speed   =~ x7 + x8 + x9 ' fit <- cfa(HS.model, data = HolzingerSwineford1939)  tmp <- show_options(fit) tmp #>  Options                             Call    Actual   #>  Estimator(s)                        default ML       #>  Standard Error                      default standard #>  Model Test Statistic(s)             default standard #>  Missing Data                        default listwise #>  Information Matrix (for SE)         default expected #>  Information Matrix (for Model Test) default expected #>  Mean Structure                      default No        fit <- cfa(HS.model, data = HolzingerSwineford1939, estimator = \"MLR\") show_options(fit) #>  Options                             Call    Actual             #>  Estimator(s)                        MLR     ML                 #>  Standard Error                      default robust.huber.white #>  Model Test Statistic(s)             default yuan.bentler.mplus #>  Missing Data                        default listwise           #>  Information Matrix (for SE)         default observed           #>  Information Matrix (for Model Test) default observed           #>  Mean Structure                      default No                 fit <- cfa(HS.model, data = HolzingerSwineford1939, estimator = \"MLM\") show_options(fit) #>  Options                             Call    Actual          #>  Estimator(s)                        MLM     ML              #>  Standard Error                      default robust.sem      #>  Model Test Statistic(s)             default satorra.bentler #>  Missing Data                        default listwise        #>  Information Matrix (for SE)         default expected        #>  Information Matrix (for Model Test) default expected        #>  Mean Structure                      default No"},{"path":"https://sfcheung.github.io/semhelpinghands/reference/simple_mediation.html","id":null,"dir":"Reference","previous_headings":"","what":"Sample Dataset: Simple Mediation — simple_mediation","title":"Sample Dataset: Simple Mediation — simple_mediation","text":"simple mediation model.","code":""},{"path":"https://sfcheung.github.io/semhelpinghands/reference/simple_mediation.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Sample Dataset: Simple Mediation — simple_mediation","text":"","code":"simple_mediation"},{"path":"https://sfcheung.github.io/semhelpinghands/reference/simple_mediation.html","id":"format","dir":"Reference","previous_headings":"","what":"Format","title":"Sample Dataset: Simple Mediation — simple_mediation","text":"data frame 100 rows 5 variables: x Predictor. Numeric. m Mediator. Numeric. y Outcome variable. Numeric. city Group variable: \"City \" \"City B\". String.","code":""},{"path":"https://sfcheung.github.io/semhelpinghands/reference/simple_mediation.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Sample Dataset: Simple Mediation — simple_mediation","text":"","code":"library(lavaan) data(simple_mediation) mod <- \" m ~ a * x y ~ b * m + x ab := a * b \" fit <- sem(mod, simple_mediation, fixed.x = FALSE) parameterEstimates(fit) #>   lhs op rhs label   est    se     z pvalue ci.lower ci.upper #> 1   m  ~   x     a 0.374 0.171 2.182  0.029    0.038    0.710 #> 2   y  ~   m     b 0.375 0.173 2.176  0.030    0.037    0.714 #> 3   y  ~   x       0.096 0.303 0.318  0.751   -0.497    0.689 #> 4   m ~~   m       2.777 0.393 7.071  0.000    2.007    3.547 #> 5   y ~~   y       8.272 1.170 7.071  0.000    5.979   10.565 #> 6   x ~~   x       0.946 0.134 7.071  0.000    0.684    1.209 #> 7  ab := a*b    ab 0.140 0.091 1.541  0.123   -0.038    0.319 mod_gp <- \" m ~ c(a1, a2) * x y ~ c(b1, b2) * m + x a1b1 := a1 * b1 a2b2 := a2 * b2 ab_diff := a1b1 - a2b2 \" fit_gp <- sem(mod_gp, simple_mediation, fixed.x = FALSE, group = \"city\") parameterEstimates(fit_gp) #>        lhs op       rhs block group   label    est    se      z pvalue ci.lower #> 1        m  ~         x     1     1      a1  0.162 0.229  0.708  0.479   -0.287 #> 2        y  ~         m     1     1      b1  0.177 0.243  0.728  0.466   -0.300 #> 3        y  ~         x     1     1          0.305 0.376  0.809  0.418   -0.433 #> 4        m ~~         m     1     1          2.382 0.502  4.743  0.000    1.398 #> 5        y ~~         y     1     1          6.354 1.340  4.743  0.000    3.729 #> 6        x ~~         x     1     1          1.008 0.212  4.743  0.000    0.591 #> 7        m ~1               1     1         12.062 1.200 10.049  0.000    9.709 #> 8        y ~1               1     1          2.075 3.531  0.588  0.557   -4.845 #> 9        x ~1               1     1          5.140 0.150 34.349  0.000    4.846 #> 10       m  ~         x     2     2      a2  0.678 0.235  2.879  0.004    0.216 #> 11       y  ~         m     2     2      b2  0.556 0.257  2.166  0.030    0.053 #> 12       y  ~         x     2     2         -0.199 0.481 -0.413  0.680   -1.141 #> 13       m ~~         m     2     2          2.656 0.507  5.244  0.000    1.663 #> 14       y ~~         y     2     2          9.626 1.836  5.244  0.000    6.028 #> 15       x ~~         x     2     2          0.871 0.166  5.244  0.000    0.546 #> 16       m ~1               2     2         10.336 1.175  8.794  0.000    8.032 #> 17       y ~1               2     2         -0.474 3.471 -0.137  0.891   -7.276 #> 18       x ~1               2     2          4.904 0.126 38.964  0.000    4.657 #> 19    a1b1 :=     a1*b1     0     0    a1b1  0.029 0.057  0.508  0.612   -0.082 #> 20    a2b2 :=     a2*b2     0     0    a2b2  0.377 0.218  1.731  0.083   -0.050 #> 21 ab_diff := a1b1-a2b2     0     0 ab_diff -0.348 0.225 -1.547  0.122   -0.789 #>    ci.upper #> 1     0.612 #> 2     0.655 #> 3     1.042 #> 4     3.366 #> 5     8.979 #> 6     1.424 #> 7    14.414 #> 8     8.995 #> 9     5.433 #> 10    1.139 #> 11    1.059 #> 12    0.744 #> 13    3.649 #> 14   13.223 #> 15    1.197 #> 16   12.640 #> 17    6.328 #> 18    5.150 #> 19    0.140 #> 20    0.804 #> 21    0.093"},{"path":"https://sfcheung.github.io/semhelpinghands/reference/sort_by.html","id":null,"dir":"Reference","previous_headings":"","what":"Sort a Parameter Estimates\nTable — sort_by","title":"Sort a Parameter Estimates\nTable — sort_by","text":"Sort parameter estimates table similar table inlavaan common fields op (operator) lhs (left- hand side).","code":""},{"path":"https://sfcheung.github.io/semhelpinghands/reference/sort_by.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Sort a Parameter Estimates\nTable — sort_by","text":"","code":"sort_by(   object,   by = c(\"op\", \"lhs\", \"rhs\"),   op_priority = c(\"=~\", \"~\", \"~~\", \":=\", \"~1\", \"|\", \"~*~\"),   number_rows = TRUE )"},{"path":"https://sfcheung.github.io/semhelpinghands/reference/sort_by.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Sort a Parameter Estimates\nTable — sort_by","text":"object output lavaan::parameterEstimates(), lavaan::standardizedSolution(), lavaan.data.frame object. May also work est_table-class object returned functions like group_by_dvs() guarantee. character vector columns filtering. Default c(\"op\", \"lhs\", \"rhs\"). op_priority rows sorted op. Default c(\"=~\", \"~\", \"~~\", \":=\", \"~1\", \"|\", \"~*~\"). Can set operators, e.g., c(\"~\", \"~~\"). operators placed end orders changed. number_rows Whether row names set row numbers sorting row names object equal row numbers. Default TRUE.","code":""},{"path":"https://sfcheung.github.io/semhelpinghands/reference/sort_by.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Sort a Parameter Estimates\nTable — sort_by","text":"sorted version input object.","code":""},{"path":"https://sfcheung.github.io/semhelpinghands/reference/sort_by.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Sort a Parameter Estimates\nTable — sort_by","text":"functions accepts output lavaan::parameterEstimates() lavaan::standardizedSolution() filter rows commonly used field.","code":""},{"path":"https://sfcheung.github.io/semhelpinghands/reference/sort_by.html","id":"author","dir":"Reference","previous_headings":"","what":"Author","title":"Sort a Parameter Estimates\nTable — sort_by","text":"Shu Fai Cheung https://orcid.org/0000-0002-9871-9448","code":""},{"path":"https://sfcheung.github.io/semhelpinghands/reference/sort_by.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Sort a Parameter Estimates\nTable — sort_by","text":"","code":"library(lavaan) set.seed(5478374) n <- 50 x <- runif(n) - .5 m <- .40 * x + rnorm(n, 0, sqrt(1 - .40)) y <- .30 * m + rnorm(n, 0, sqrt(1 - .30)) dat <- data.frame(x = x, y = y, m = m) model1 <- ' m ~ a*x y ~ b*m ab := a*b ' fit1 <- sem(model1, data = dat, fixed.x = FALSE) model2 <- ' m ~ a*x y ~ b*m + x ab := a*b ' fit2 <- sem(model2, data = dat, fixed.x = FALSE) parameterEstimates(fit1) #>   lhs op rhs label   est    se     z pvalue ci.lower ci.upper #> 1   m  ~   x     a 0.569 0.343 1.660  0.097   -0.103    1.240 #> 2   y  ~   m     b 0.219 0.153 1.430  0.153   -0.081    0.519 #> 3   m ~~   m       0.460 0.092 5.000  0.000    0.280    0.641 #> 4   y ~~   y       0.570 0.114 5.000  0.000    0.347    0.794 #> 5   x ~~   x       0.078 0.016 5.000  0.000    0.048    0.109 #> 6  ab := a*b    ab 0.125 0.115 1.083  0.279   -0.101    0.350 parameterEstimates(fit2) #>   lhs op rhs label   est    se     z pvalue ci.lower ci.upper #> 1   m  ~   x     a 0.569 0.343 1.660  0.097   -0.103    1.240 #> 2   y  ~   m     b 0.214 0.157 1.360  0.174   -0.094    0.522 #> 3   y  ~   x       0.056 0.392 0.142  0.887   -0.712    0.823 #> 4   m ~~   m       0.460 0.092 5.000  0.000    0.280    0.641 #> 5   y ~~   y       0.570 0.114 5.000  0.000    0.347    0.793 #> 6   x ~~   x       0.078 0.016 5.000  0.000    0.048    0.109 #> 7  ab := a*b    ab 0.122 0.116 1.052  0.293   -0.105    0.348 out <- group_by_models(list(no_direct = fit1,                             direct = fit2),                         col_names = c(\"est\", \"pvalue\")) out #>   lhs op rhs est_no_direct est_direct pvalue_no_direct pvalue_direct #> 1   m  ~   x         0.569      0.569            0.097         0.097 #> 2   y  ~   m         0.219      0.214            0.153         0.174 #> 3   y  ~   x            NA      0.056               NA         0.887 #> 4   m ~~   m         0.460      0.460            0.000         0.000 #> 5   x ~~   x         0.078      0.078            0.000         0.000 #> 6   y ~~   y         0.570      0.570            0.000         0.000 #> 7  ab := a*b         0.125      0.122            0.279         0.293 sort_by(out) #>   lhs op rhs est_no_direct est_direct pvalue_no_direct pvalue_direct #> 1   m  ~   x         0.569      0.569            0.097         0.097 #> 2   y  ~   m         0.219      0.214            0.153         0.174 #> 3   y  ~   x            NA      0.056               NA         0.887 #> 4   m ~~   m         0.460      0.460            0.000         0.000 #> 5   x ~~   x         0.078      0.078            0.000         0.000 #> 6   y ~~   y         0.570      0.570            0.000         0.000 #> 7  ab := a*b         0.125      0.122            0.279         0.293 sort_by(out, op_priority = c(\"~\", \":=\")) #>   lhs op rhs est_no_direct est_direct pvalue_no_direct pvalue_direct #> 1   m  ~   x         0.569      0.569            0.097         0.097 #> 2   y  ~   m         0.219      0.214            0.153         0.174 #> 3   y  ~   x            NA      0.056               NA         0.887 #> 4  ab := a*b         0.125      0.122            0.279         0.293 #> 5   m ~~   m         0.460      0.460            0.000         0.000 #> 6   x ~~   x         0.078      0.078            0.000         0.000 #> 7   y ~~   y         0.570      0.570            0.000         0.000 sort_by(out, by = c(\"op\", \"rhs\")) #>   lhs op rhs est_no_direct est_direct pvalue_no_direct pvalue_direct #> 1   y  ~   m         0.219      0.214            0.153         0.174 #> 2   m  ~   x         0.569      0.569            0.097         0.097 #> 3   y  ~   x            NA      0.056               NA         0.887 #> 4   m ~~   m         0.460      0.460            0.000         0.000 #> 5   x ~~   x         0.078      0.078            0.000         0.000 #> 6   y ~~   y         0.570      0.570            0.000         0.000 #> 7  ab := a*b         0.125      0.122            0.279         0.293"},{"path":"https://sfcheung.github.io/semhelpinghands/reference/standardizedSolution_boot_ci.html","id":null,"dir":"Reference","previous_headings":"","what":"Bootstrap CIs for Standardized\nSolution — standardizedSolution_boot_ci","title":"Bootstrap CIs for Standardized\nSolution — standardizedSolution_boot_ci","text":"Functions forming bootstrap confidence intervals standardized solution.","code":""},{"path":"https://sfcheung.github.io/semhelpinghands/reference/standardizedSolution_boot_ci.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Bootstrap CIs for Standardized\nSolution — standardizedSolution_boot_ci","text":"","code":"standardizedSolution_boot_ci(   object,   level = 0.95,   type = \"std.all\",   save_boot_est_std = TRUE,   force_run = FALSE,   boot_delta_ratio = FALSE,   ... )  store_boot_est_std(object, type = \"std.all\", force_run = FALSE, ...)  get_boot_est_std(object)"},{"path":"https://sfcheung.github.io/semhelpinghands/reference/standardizedSolution_boot_ci.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Bootstrap CIs for Standardized\nSolution — standardizedSolution_boot_ci","text":"object lavaan object, fitted 'se = \"boot\"'. level level confidence confidence intervals. Default .95. type type standard estimates. argument lavaan::standardizedSolution(), support values supported lavaan::standardizedSolution(). Default \"std.\". save_boot_est_std Whether bootstrap estimates standardized solution saved. saved, stored attribute boot_est_std. Default TRUE. force_run TRUE, skip checks run models without checking estimates. internal use. Default FALSE. boot_delta_ratio ratio () distance bootstrap confidence limit point estimate (b) distance delta-method limit point estimate. Default FALSE. ... arguments passed lavaan::standardizedSolution().","code":""},{"path":"https://sfcheung.github.io/semhelpinghands/reference/standardizedSolution_boot_ci.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Bootstrap CIs for Standardized\nSolution — standardizedSolution_boot_ci","text":"output lavaan::standardizedSolution(), bootstrap confidence intervals appended right, class set std_solution_boot (since version 0.1.8.4). print method (print.std_solution_boot()) can used print standardized solution format similar printout summary() lavaan::lavaan object. store_boot_est_std() returns fit object set object, bootstrap values standardized solution bootstrap samples, matrix, stored slot external name shh_boot_est_std. get_boot_est_std() returns matrix stored bootstrap estimates standardized solution. none stored, NULL returned. store_boot_est_std() usually used diagnostic functions plot_boot().","code":""},{"path":"https://sfcheung.github.io/semhelpinghands/reference/standardizedSolution_boot_ci.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Bootstrap CIs for Standardized\nSolution — standardizedSolution_boot_ci","text":"standardizedSolution_boot_ci() receives lavaan::lavaan object fitted bootstrapping standard errors requested forms confidence intervals standardized solution. works calling lavaan::standardizedSolution() bootstrap estimates free parameters bootstrap sample compute standardized estimates sample. reliable way use function like lavaan::bootstrapLavaan(). Nevertheless, simple function good enough simple scenarios, require repeating bootstrapping step. store_boot_est_std() computes standardized solution bootstrap sample, stores lavaan::lavaan object, returns . estimates can used functions, plot_boot(), examine estimates, without need repeat computation. get_boot_est_std() retrieves bootstrap estimates standardized solution stored store_boot_est_std().","code":""},{"path":[]},{"path":"https://sfcheung.github.io/semhelpinghands/reference/standardizedSolution_boot_ci.html","id":"author","dir":"Reference","previous_headings":"","what":"Author","title":"Bootstrap CIs for Standardized\nSolution — standardizedSolution_boot_ci","text":"Shu Fai Cheung https://orcid.org/0000-0002-9871-9448. Originally proposed issue GitHub https://github.com/simsem/semTools/issues/101#issue-1021974657, inspired discussion Google group lavaan https://groups.google.com/g/lavaan/c/qQBXSz5cd0o/m/R8YT5HxNAgAJ. boot::boot.ci() used form percentile confidence intervals version.","code":""},{"path":"https://sfcheung.github.io/semhelpinghands/reference/standardizedSolution_boot_ci.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Bootstrap CIs for Standardized\nSolution — standardizedSolution_boot_ci","text":"","code":"library(lavaan) set.seed(5478374) n <- 50 x <- runif(n) - .5 m <- .40 * x + rnorm(n, 0, sqrt(1 - .40)) y <- .30 * m + rnorm(n, 0, sqrt(1 - .30)) dat <- data.frame(x = x, y = y, m = m) model <- ' m ~ a*x y ~ b*m ab := a*b '  # Should set bootstrap to at least 2000 in real studies fit <- sem(model, data = dat, fixed.x = FALSE,            se = \"boot\",            bootstrap = 100) summary(fit) #> lavaan 0.6.16 ended normally after 1 iteration #>  #>   Estimator                                         ML #>   Optimization method                           NLMINB #>   Number of model parameters                         5 #>  #>   Number of observations                            50 #>  #> Model Test User Model: #>                                                        #>   Test statistic                                 0.020 #>   Degrees of freedom                                 1 #>   P-value (Chi-square)                           0.887 #>  #> Parameter Estimates: #>  #>   Standard errors                            Bootstrap #>   Number of requested bootstrap draws              100 #>   Number of successful bootstrap draws             100 #>  #> Regressions: #>                    Estimate  Std.Err  z-value  P(>|z|) #>   m ~                                                  #>     x          (a)    0.569    0.325    1.749    0.080 #>   y ~                                                  #>     m          (b)    0.219    0.146    1.495    0.135 #>  #> Variances: #>                    Estimate  Std.Err  z-value  P(>|z|) #>    .m                 0.460    0.086    5.381    0.000 #>    .y                 0.570    0.110    5.178    0.000 #>     x                 0.078    0.012    6.782    0.000 #>  #> Defined Parameters: #>                    Estimate  Std.Err  z-value  P(>|z|) #>     ab                0.125    0.126    0.992    0.321 #>   std <- standardizedSolution_boot_ci(fit) std #>   lhs op rhs label est.std    se      z pvalue ci.lower ci.upper boot.ci.lower #> 1   m  ~   x     a   0.229 0.127  1.800  0.072   -0.020    0.477        -0.041 #> 2   y  ~   m     b   0.198 0.118  1.684  0.092   -0.032    0.429        -0.024 #> 3   m ~~   m         0.948 0.058 16.325  0.000    0.834    1.062         0.793 #> 4   y ~~   y         0.961 0.047 20.595  0.000    0.869    1.052         0.785 #> 5   x ~~   x         1.000 0.000     NA     NA    1.000    1.000            NA #> 6  ab := a*b    ab   0.045 0.040  1.130  0.259   -0.033    0.124        -0.007 #>   boot.ci.upper boot.se #> 1         0.454   0.125 #> 2         0.464   0.115 #> 3         1.000   0.057 #> 4         1.000   0.052 #> 5            NA      NA #> 6         0.164   0.043  # Print in a friendly format with only standardized solution print(std, output = \"text\") #>  #> Standardized Estimates Only #>  #>   Standard errors                            Bootstrap #>   Confidence interval                        Bootstrap #>   Confidence Level                               95.0% #>   Standardization Type                         std.all #>   Number of requested bootstrap draws              100 #>   Number of successful bootstrap draws             100 #>  #> Regressions: #>                Standardized  Std.Err ci.lower ci.upper #>   m ~                                                  #>     x          (a)    0.229    0.125   -0.041    0.454 #>   y ~                                                  #>     m          (b)    0.198    0.115   -0.024    0.464 #>  #> Variances: #>                Standardized  Std.Err ci.lower ci.upper #>    .m                 0.948    0.057    0.793    1.000 #>    .y                 0.961    0.052    0.785    1.000 #>     x                 1.000       NA       NA       NA #>  #> Defined Parameters: #>                Standardized  Std.Err ci.lower ci.upper #>     ab                0.045    0.043   -0.007    0.164 #>   # Print in a friendly format with both unstandardized # and standardized solution print(std, output = \"text\", standardized_only = FALSE) #>  #> Parameter Estimates: #>  #>   Standard errors                            Bootstrap #>   Number of requested bootstrap draws              100 #>   Number of successful bootstrap draws             100 #>  #> Regressions: #>                    Estimate  Std.Err  z-value  P(>|z|) ci.lower ci.upper #>   m ~                                                                    #>     x          (a)    0.569    0.325    1.749    0.080   -0.098    1.261 #>   y ~                                                                    #>     m          (b)    0.219    0.146    1.495    0.135   -0.020    0.613 #>  Standardized ci.std.lower ci.std.upper Std.Err.std #>                                                     #>     0.229       -0.041        0.454        0.125    #>                                                     #>     0.198       -0.024        0.464        0.115    #>  #> Variances: #>                    Estimate  Std.Err  z-value  P(>|z|) ci.lower ci.upper #>    .m                 0.460    0.086    5.381    0.000    0.279    0.623 #>    .y                 0.570    0.110    5.178    0.000    0.345    0.775 #>     x                 0.078    0.012    6.782    0.000    0.055    0.101 #>  Standardized ci.std.lower ci.std.upper Std.Err.std #>     0.948        0.793        1.000        0.057    #>     0.961        0.785        1.000        0.052    #>     1.000           NA           NA           NA    #>  #> Defined Parameters: #>                    Estimate  Std.Err  z-value  P(>|z|) ci.lower ci.upper #>     ab                0.125    0.126    0.992    0.321   -0.019    0.501 #>  Standardized ci.std.lower ci.std.upper Std.Err.std #>     0.045       -0.007        0.164        0.043    #>    # store_boot_est_std() is usually used with plot_boot() # First, store the bootstrap estimates of the # standardized solution fit_with_boot_std <- store_boot_est_std(fit) # Second, plot the distribution of the bootstrap estimates of # standardized 'ab' plot_boot(fit_with_boot_std, \"ab\", standardized = TRUE)"},{"path":"https://sfcheung.github.io/semhelpinghands/reference/store_boot_def.html","id":null,"dir":"Reference","previous_headings":"","what":"Store Bootstrap Estimates of User-Defined Parameters — store_boot_def","title":"Store Bootstrap Estimates of User-Defined Parameters — store_boot_def","text":"receives lavaan::lavaan object fitted bootstrapping standard errors requested, computes user-defined parameters bootstrap samples, returns lavaan::lavaan object estimates stored.","code":""},{"path":"https://sfcheung.github.io/semhelpinghands/reference/store_boot_def.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Store Bootstrap Estimates of User-Defined Parameters — store_boot_def","text":"","code":"store_boot_def(object, force_run = FALSE)  get_boot_def(object)"},{"path":"https://sfcheung.github.io/semhelpinghands/reference/store_boot_def.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Store Bootstrap Estimates of User-Defined Parameters — store_boot_def","text":"object lavaan object, fitted 'se = \"boot\"'. force_run TRUE, skip checks run models without checking estimates. internal use. Default FALSE.","code":""},{"path":"https://sfcheung.github.io/semhelpinghands/reference/store_boot_def.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Store Bootstrap Estimates of User-Defined Parameters — store_boot_def","text":"store_boot_def() returns fit object set object, bootstrap values user-defined parameters bootstrap samples, matrix, stored slot external object name shh_boot_def. get_boot_def() returns matrix stored bootstrap estimates user-defined parameters","code":""},{"path":"https://sfcheung.github.io/semhelpinghands/reference/store_boot_def.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Store Bootstrap Estimates of User-Defined Parameters — store_boot_def","text":"lavaan::lavaan() wrappers, lavaan::sem() lavaan::cfa(), stores estimates free parameters bootstrap sample bootstrapping requested. However, model user-defined parameters, values bootstrap sample stored. store_boot_def() computes retrieves stored bootstrap estimates computes values user-defined parameters. values stored slot external object, element shh_boot_def. bootstrap estimates can used functions diagnostics purposes. get_boot_def() extracts bootstrap estimates user-defined parameters lavaan object. none stored, NULL returned. store_boot_def() usually used diagnostic functions plot_boot().","code":""},{"path":[]},{"path":"https://sfcheung.github.io/semhelpinghands/reference/store_boot_def.html","id":"author","dir":"Reference","previous_headings":"","what":"Author","title":"Store Bootstrap Estimates of User-Defined Parameters — store_boot_def","text":"Shu Fai Cheung https://orcid.org/0000-0002-9871-9448.","code":""},{"path":"https://sfcheung.github.io/semhelpinghands/reference/store_boot_def.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Store Bootstrap Estimates of User-Defined Parameters — store_boot_def","text":"","code":"library(lavaan) set.seed(5478374) n <- 50 x <- runif(n) - .5 m <- .40 * x + rnorm(n, 0, sqrt(1 - .40)) y <- .30 * m + rnorm(n, 0, sqrt(1 - .30)) dat <- data.frame(x = x, y = y, m = m) model <- ' m ~ a*x y ~ b*m ab := a*b '  # Should set bootstrap to at least 2000 in real studies fit <- sem(model, data = dat, fixed.x = FALSE,            se = \"boot\",            bootstrap = 100) summary(fit) #> lavaan 0.6.16 ended normally after 1 iteration #>  #>   Estimator                                         ML #>   Optimization method                           NLMINB #>   Number of model parameters                         5 #>  #>   Number of observations                            50 #>  #> Model Test User Model: #>                                                        #>   Test statistic                                 0.020 #>   Degrees of freedom                                 1 #>   P-value (Chi-square)                           0.887 #>  #> Parameter Estimates: #>  #>   Standard errors                            Bootstrap #>   Number of requested bootstrap draws              100 #>   Number of successful bootstrap draws             100 #>  #> Regressions: #>                    Estimate  Std.Err  z-value  P(>|z|) #>   m ~                                                  #>     x          (a)    0.569    0.325    1.749    0.080 #>   y ~                                                  #>     m          (b)    0.219    0.146    1.495    0.135 #>  #> Variances: #>                    Estimate  Std.Err  z-value  P(>|z|) #>    .m                 0.460    0.086    5.381    0.000 #>    .y                 0.570    0.110    5.178    0.000 #>     x                 0.078    0.012    6.782    0.000 #>  #> Defined Parameters: #>                    Estimate  Std.Err  z-value  P(>|z|) #>     ab                0.125    0.126    0.992    0.321 #>   # store_boot_def() is usually used with plot_boot() # First, store the bootstrap estimates of user-defined # parameters fit_with_boot_def <- store_boot_def(fit) # Second, plot the distribution of the bootstrap estimates of # 'ab' plot_boot(fit_with_boot_def, \"ab\", standardized = FALSE)"},{"path":"https://sfcheung.github.io/semhelpinghands/reference/vector_from_lavaan.html","id":null,"dir":"Reference","previous_headings":"","what":"Wrapper Functions to Extract\nInformation as a Vector — vec_rsquare","title":"Wrapper Functions to Extract\nInformation as a Vector — vec_rsquare","text":"set wrapper functions extract information lavaan-class object return named vector.","code":""},{"path":"https://sfcheung.github.io/semhelpinghands/reference/vector_from_lavaan.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Wrapper Functions to Extract\nInformation as a Vector — vec_rsquare","text":"","code":"vec_rsquare(object)  vec_sample_vcov(object)  vec_sample_var(object)  vec_est_var(object)  vec_est_se(object)  vec_def_var(object)  vec_def_se(object)  vec_lavTestLRT(   object,   ...,   method = \"default\",   A.method = \"delta\",   scaled.shifted = TRUE,   H1 = TRUE,   model.names = NULL )  vec_lavTestScore(   object,   add = NULL,   release = NULL,   univariate = TRUE,   information = \"expected\" )  vec_lavTestWald(object, constraints = NULL, prefix = NULL)  vec_compRelSEM(object, ...)"},{"path":"https://sfcheung.github.io/semhelpinghands/reference/vector_from_lavaan.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Wrapper Functions to Extract\nInformation as a Vector — vec_rsquare","text":"object lavaan-class object. ... Additional arguments passed original function. method argument passed lavaan::lavTestLRT(). Please refer help page lavaan::lavTestLRT(). .method argument passed lavaan::lavTestLRT(). Please refer help page lavaan::lavTestLRT(). scaled.shifted argument passed lavaan::lavTestLRT(). Please refer help page lavaan::lavTestLRT(). H1 argument passed lavaan::lavTestLRT(). Please refer help page lavaan::lavTestLRT(). model.names argument passed lavaan::lavTestLRT(). Please refer help page lavaan::lavTestLRT(). Unlike lavaan::lavTestLRT(), argument required, sake naming vector returned. add argument passed lavaan::lavTestScore(). Please refer help page lavaan::lavTestScore(). release argument passed lavaan::lavTestScore(). Please refer help page lavaan::lavTestScore(). univariate argument passed lavaan::lavTestScore(). Please refer help page lavaan::lavTestScore(). information argument passed lavaan::lavTestScore(). Please refer help page lavaan::lavTestScore(). constraints argument passed lavaan::lavTestWald(). Please refer help page lavaan::lavTestWald(). prefix Optional. character string added prefix names output. Default NULL.","code":""},{"path":"https://sfcheung.github.io/semhelpinghands/reference/vector_from_lavaan.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Wrapper Functions to Extract\nInformation as a Vector — vec_rsquare","text":"return named numeric vector.","code":""},{"path":"https://sfcheung.github.io/semhelpinghands/reference/vector_from_lavaan.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Wrapper Functions to Extract\nInformation as a Vector — vec_rsquare","text":"set wrapper functions functions like lavaan::bootstrapLavaan() require users supply function receives lavaan-class object returns vector values. wrappers functions designed form output: named numeric vector. Many tasks set wrappers can performed writing functions. wrapper functions developed just save coding time commonly requested information. wrapper functions designed simple use possible, arguments possible. advanced control needed, users recommended write wrappers.","code":""},{"path":"https://sfcheung.github.io/semhelpinghands/reference/vector_from_lavaan.html","id":"functions","dir":"Reference","previous_headings":"","what":"Functions","title":"Wrapper Functions to Extract\nInformation as a Vector — vec_rsquare","text":"vec_rsquare(): Get R-squares model. vec_sample_vcov(): Get sample variances covariances. vec_sample_var(): Get sample variances. vec_est_var(): Sampling variances free parameters. vec_est_se(): Standard errors free parameters. vec_def_var(): Sampling variances user-defined parameters. vec_def_se(): Standard errors user-defined parameters. vec_lavTestLRT(): Get sample variances. vec_lavTestScore(): score tests. vec_lavTestWald(): Wald test. vec_compRelSEM(): Composite reliability.","code":""},{"path":[]},{"path":"https://sfcheung.github.io/semhelpinghands/reference/vector_from_lavaan.html","id":"author","dir":"Reference","previous_headings":"","what":"Author","title":"Wrapper Functions to Extract\nInformation as a Vector — vec_rsquare","text":"Shu Fai Cheung https://orcid.org/0000-0002-9871-9448","code":""},{"path":"https://sfcheung.github.io/semhelpinghands/reference/vector_from_lavaan.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Wrapper Functions to Extract\nInformation as a Vector — vec_rsquare","text":"","code":"# From the help page of lavaan::cfa().  library(lavaan) HS.model <- ' visual  =~ x1 + x2 + x3 textual =~ x4 + x5 + x6 speed   =~ x7 + x8 + x9 ' fit <- cfa(HS.model, data = HolzingerSwineford1939)  vec_rsquare(fit) #>    x1_rsq    x2_rsq    x3_rsq    x4_rsq    x5_rsq    x6_rsq    x7_rsq    x8_rsq  #> 0.5957994 0.1794378 0.3377148 0.7251923 0.7311369 0.7022609 0.3243470 0.5227933  #>    x9_rsq  #> 0.4422373  vec_sample_vcov(fit) #>      x1~~x1      x1~~x2      x1~~x3      x1~~x4      x1~~x5      x1~~x6  #>  1.35836985  0.40737133  0.57989932  0.50483500  0.44061554  0.45480813  #>      x1~~x7      x1~~x8      x1~~x9      x2~~x2      x2~~x3      x2~~x4  #>  0.08476543  0.26383768  0.45833855  1.38178387  0.45106394  0.20892337  #>      x2~~x5      x2~~x6      x2~~x7      x2~~x8      x2~~x9      x3~~x3  #>  0.21109108  0.24754457 -0.09675102  0.10965939  0.24400945  1.27486486  #>      x3~~x4      x3~~x5      x3~~x6      x3~~x7      x3~~x8      x3~~x9  #>  0.20816961  0.11229629  0.24410898  0.08834184  0.21232264  0.37385257  #>      x4~~x4      x4~~x5      x4~~x6      x4~~x7      x4~~x8      x4~~x9  #>  1.35066451  1.09775278  0.89551571  0.21974259  0.12559335  0.24336274  #>      x5~~x5      x5~~x6      x5~~x7      x5~~x8      x5~~x9      x6~~x6  #>  1.65978576  1.01452404  0.14299955  0.18060521  0.29524133  1.19635838  #>      x6~~x7      x6~~x8      x6~~x9      x7~~x7      x7~~x8      x7~~x9  #>  0.14407839  0.16543100  0.23599695  1.18313946  0.53524522  0.37329722  #>      x8~~x8      x8~~x9      x9~~x9  #>  1.02198281  0.45731656  1.01500387  vec_sample_var(fit) #>   x1_var   x2_var   x3_var   x4_var   x5_var   x6_var   x7_var   x8_var  #> 1.358370 1.381784 1.274865 1.350665 1.659786 1.196358 1.183139 1.021983  #>   x9_var  #> 1.015004  vec_est_var(fit) #>       visual=~x2       visual=~x3      textual=~x5      textual=~x6  #>      0.009933136      0.011904927      0.004279791      0.003074576  #>        speed=~x8        speed=~x9           x1~~x1           x2~~x2  #>      0.027220569      0.022851594      0.012905170      0.010347644  #>           x3~~x3           x4~~x4           x5~~x5           x6~~x6  #>      0.008212561      0.002276988      0.003409716      0.001852008  #>           x7~~x7           x8~~x8           x9~~x9   visual~~visual  #>      0.006622958      0.005504763      0.005003714      0.021159312  #> textual~~textual     speed~~speed  visual~~textual    visual~~speed  #>      0.012567721      0.007432025      0.005405761      0.003167033  #>   textual~~speed  #>      0.002431936  vec_est_se(fit) #>       visual=~x2       visual=~x3      textual=~x5      textual=~x6  #>       0.09966512       0.10910970       0.06542011       0.05544886  #>        speed=~x8        speed=~x9           x1~~x1           x2~~x2  #>       0.16498657       0.15116744       0.11360092       0.10172337  #>           x3~~x3           x4~~x4           x5~~x5           x6~~x6  #>       0.09062318       0.04771779       0.05839278       0.04303497  #>           x7~~x7           x8~~x8           x9~~x9   visual~~visual  #>       0.08138156       0.07419409       0.07073694       0.14546241  #> textual~~textual     speed~~speed  visual~~textual    visual~~speed  #>       0.11210585       0.08620919       0.07352388       0.05627640  #>   textual~~speed  #>       0.04931466   HS.model.sem1 <- ' visual  =~ x1 + x2 + x3 textual =~ x4 + x5 + x6 speed   =~ x7 + x8 + x9 textual ~ a * visual speed ~ b * textual ab := a * b ' fit_sem1 <- sem(HS.model.sem1, data = HolzingerSwineford1939)  HS.model.sem2 <- ' visual  =~ x1 + x2 + x3 textual =~ x4 + x5 + x6 speed   =~ x7 + x8 + x9 textual ~ a * visual speed ~ b * textual + cp * visual ab := a * b ' fit_sem2 <- sem(HS.model.sem2, data = HolzingerSwineford1939)  vec_def_var(fit_sem1) #>           ab  #> 0.0009906484  vec_def_se(fit_sem1) #>         ab  #> 0.03147457   vec_lavTestLRT(fit_sem1, fit_sem2,                model.names = c(\"No Direct\", \"Direct\")) #> chisq_diff.Direct_vs_No Direct    df_diff.Direct_vs_No Direct  #>                   1.810531e+01                   1.000000e+00  #>    chisq_p.Direct_vs_No Direct  #>                   2.090176e-05   vec_lavTestScore(fit_sem1,                  add = \"speed ~ visual\") #>        score_chisq           score_df            score_p speed~visual.chisq  #>       1.584567e+01       1.000000e+00       6.872365e-05       1.584567e+01  #>    speed~visual.df     speed~visual.p  #>       1.000000e+00       6.872365e-05   vec_lavTestWald(fit_sem2,                 constraints = \"cp == 0\") #>    wald_stat      wald_df       wald_p  #> 1.444631e+01 1.000000e+00 1.442117e-04   if (requireNamespace(\"semTools\")) {     vec_compRelSEM(fit)   } #> Loading required namespace: semTools #>  visual_rel textual_rel   speed_rel  #>       0.612       0.885       0.686"},{"path":[]},{"path":"https://sfcheung.github.io/semhelpinghands/news/index.html","id":"new-features-0-1-9-5","dir":"Changelog","previous_headings":"","what":"New Features","title":"semhelpinghands 0.1.9.5","text":"Added ptable_to_syntax]() converting lavaan parameter table lavaan model syntax. (0.1.9.1 - 0.1.9.5)","code":""},{"path":"https://sfcheung.github.io/semhelpinghands/news/index.html","id":"semhelpinghands-019","dir":"Changelog","previous_headings":"","what":"semhelpinghands 0.1.9","title":"semhelpinghands 0.1.9","text":"CRAN release: 2023-09-17","code":""},{"path":"https://sfcheung.github.io/semhelpinghands/news/index.html","id":"new-features-0-1-9","dir":"Changelog","previous_headings":"","what":"New Features","title":"semhelpinghands 0.1.9","text":"Added store_boot_est_std() store_boot_def() computing storing bootstrap estimates standardized solution user parameters, respectively. Added get_boot_est_std() get-boot_def() extract computed estimates. (0.1.8.2, 0.1.8.3, 0.1.8.5). Set class output standardizedSolution_boot_ci() std_solution_boot, print method printing output printout summary output lavaan-class object. (0.1.8.4) Added plot_boot() diagnostic plots bootstrapping, similiar output boot::boot(). Can used lavaan’s bootstrap estimates free parameters, user-defined parameters (stored store_boot_def()), standardized solution (stored store_boot_est_std()). Also added article pkgdown website (0.1.8.6, 0.1.8.10).","code":""},{"path":"https://sfcheung.github.io/semhelpinghands/news/index.html","id":"semhelpinghands-018","dir":"Changelog","previous_headings":"","what":"semhelpinghands 0.1.8","title":"semhelpinghands 0.1.8","text":"CRAN release: 2023-07-06","code":""},{"path":"https://sfcheung.github.io/semhelpinghands/news/index.html","id":"new-features-0-1-8","dir":"Changelog","previous_headings":"","what":"New Features","title":"semhelpinghands 0.1.8","text":"Migrated functions semunpack package package: annotate_matrices(), plot_models_fm(), show_ifi(), show_cfi(), show_tli(), show_options(). (0.1.6.4) Added set wrappers (e.g., vec_rsquare()) extract commonly requested information return output named numeric vector. (0.1.6.5)","code":""},{"path":"https://sfcheung.github.io/semhelpinghands/news/index.html","id":"others-0-1-8","dir":"Changelog","previous_headings":"","what":"Others","title":"semhelpinghands 0.1.8","text":"Updated badge README.md. (0.1.6.1) Updated pkgdown site. (0.1.6.2) Added test noSuggests R CMD check. (0.1.6.3) Shorten y-axis label plot show_ifi(). (0.1.8)","code":""},{"path":"https://sfcheung.github.io/semhelpinghands/news/index.html","id":"semhelpinghands-016","dir":"Changelog","previous_headings":"","what":"semhelpinghands 0.1.6","title":"semhelpinghands 0.1.6","text":"CRAN release: 2023-01-06 Fixed word wrap DESCRIPTION. (0.1.4.5) Added R CMD Check action. (0.1.4.5) Fixed typo error; updated doc. (0.1.4.6) Modified standardizedSolution_boot_ci() work lavaan 0.6-13. Bootstrap replications errors (e.g., inadmissible solutions), flagged, removed. Fixed issue README.md. (0.1.6)","code":""},{"path":"https://sfcheung.github.io/semhelpinghands/news/index.html","id":"semhelpinghands-0144-cran","dir":"Changelog","previous_headings":"","what":"semhelpinghands 0.1.4.4 (CRAN)","title":"semhelpinghands 0.1.4.4 (CRAN)","text":"CRAN release: 2022-08-27 Fixed typo errors. (0.1.4.2) Fixed link. (0.1.4.3) Fixed CRAN related issues. (0.1.4.4)","code":""},{"path":"https://sfcheung.github.io/semhelpinghands/news/index.html","id":"semhelpinghands-0141","dir":"Changelog","previous_headings":"","what":"semhelpinghands 0.1.4.1","title":"semhelpinghands 0.1.4.1","text":"Added sort_by(). Update functions call sort_by(). (0.1.4.1)","code":""},{"path":"https://sfcheung.github.io/semhelpinghands/news/index.html","id":"semhelpinghands-0140","dir":"Changelog","previous_headings":"","what":"semhelpinghands 0.1.4.0","title":"semhelpinghands 0.1.4.0","text":"Improved notes examples. (0.1.2.1) Fixed bugs. (0.1.2.1) Provided background information standardizedSolution_boot_ci(). (0.1.2.2, 0.1.2.3) Added se_ratios() comparing standard errors different estimators. (0.1.2.4) Added show_more_options(). (0.1.2.5) Fixed bug estimates table manipulation functions. (0.1.3.2) Fixed bug test used known results. (0.1.4.0)","code":""},{"path":"https://sfcheung.github.io/semhelpinghands/news/index.html","id":"semhelpinghands-0120","dir":"Changelog","previous_headings":"","what":"semhelpinghands 0.1.2.0","title":"semhelpinghands 0.1.2.0","text":"Added standardizedSolution_boot_ci() forming bootstrap percentile confidence intervals standardized solution lavaan output. Added add_sig() add “stars” parameter estimates table. Added group_by_dvs(), group_by_ivs(), group_by_models() group parameter estimates. Added record_history() record optimization history. Added filter_by() selecting rows parameter estimates table. Added group_by_group() group parameter estimates. Added add_exo_cov() auto_exo_cov() generate covariances.","code":""}]
